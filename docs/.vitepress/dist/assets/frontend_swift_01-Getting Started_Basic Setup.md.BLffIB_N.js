import{_ as e,c as i,o as a,ag as o}from"./chunks/framework.BHpayLOB.js";const c="/assets/newproject_2x.E4tz2V26.png",w=JSON.parse('{"title":"基本设置","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/swift/01-Getting Started/Basic Setup.md","filePath":"frontend/swift/01-Getting Started/Basic Setup.md"}'),n={name:"frontend/swift/01-Getting Started/Basic Setup.md"};function d(r,t,s,l,p,f){return a(),i("div",null,t[0]||(t[0]=[o('<h1 id="基本设置" tabindex="-1">基本设置 <a class="header-anchor" href="#基本设置" aria-label="Permalink to &quot;基本设置&quot;">​</a></h1><ul><li><a href="#setting_up_your_swift_environment">搭建 Swift 环境</a></li><li><a href="#understanding_the_swift_import_process">理解 Swift 导入过程</a></li></ul><p>Swift 可无缝兼容 Cocoa 和 Objective-C。在 Swift，可以使用 Objective-C API，也可以在 Objective-C 中使用 Swift API。这种兼容性能让 Swift 作为一个简洁、易用、强大的工具集成到你的 Cocoa 应用开发流程中。</p><p>这篇指南包括了三个有关兼容性的重要方面，能够帮你更好地利用这种兼容性来开发 Cocoa 应用：</p><ul><li><strong>交互</strong> 可以将 Swift 和 Objective-C 相接合，在 Objective-C 中使用 Swift 类，并利用熟悉的 Cocoa 类、设计模式以及各种实践经验。</li><li><strong>混搭</strong> 可以创建结合了 Swift 和 Objective-C 文件的混合语言应用，并且它们能跟彼此进行通信。</li><li><strong>迁移</strong> 由于以上两点，从现有的 Objective-C 代码迁移到 Swift 会非常简单，这使运用最新的 Swift 特性取代你的 Objective-C 应用中的部分内容成为了可能。</li></ul><p>在开始学习这些特性前，需要对如何搭建 Swift 环境来使用 Cocoa 系统框架有个大致了解。</p><p><a name="setting_up_your_swift_environment"></a></p><h2 id="搭建-swift-环境" tabindex="-1">搭建 Swift 环境 <a class="header-anchor" href="#搭建-swift-环境" aria-label="Permalink to &quot;搭建 Swift 环境&quot;">​</a></h2><p>为了开始体验在 Swift 中访问 Cocoa 框架，使用 Xcode 的一个模板来创建一个基于 Swift 的应用。</p><h5 id="在-xcode-中创建一个-swift-项目" tabindex="-1">在 Xcode 中创建一个 Swift 项目 <a class="header-anchor" href="#在-xcode-中创建一个-swift-项目" aria-label="Permalink to &quot;在 Xcode 中创建一个 Swift 项目&quot;">​</a></h5><p>1.选择<code>File &gt; New &gt; Project &gt; (iOS，watchOS，tvOS 或 OS X) &gt; Application</code>，然后选择一个模板。</p><p>2.点击<code>Language</code>下拉菜单并选择 Swift。</p><p><img src="'+c+'" alt=""></p><p>Swift 项目的结构几乎和 Objective-C 项目一模一样，只有一个重要的区别：Swift 没有头文件。在接口和实现之间没有显式划分，一个类中的所有信息都在一个单独的<code>.swift</code>文件中，详情请参阅 <a href="./../03-Mix and Match/Swift and Objective-C in the Same Project.html">在项目中同时使用 Swift 和 Objective-C</a> 章节。</p><p>现在可以开始尝试在<code>AppDelegate</code>中编写 Swift 代码，或者可以选择<code>File &gt; New &gt; File &gt; (iOS，watchOS，tvOS 或 OS X) &gt; Source &gt; Swift</code>来创建一个新的 Swift 文件。</p><h3 id="要求" tabindex="-1">要求 <a class="header-anchor" href="#要求" aria-label="Permalink to &quot;要求&quot;">​</a></h3><p>使用 Swift 3.0 创建应用需要使用 Xcode 8.0 或更高版本，而且使用的 SDK 有如下要求：</p><table tabindex="0"><thead><tr><th style="text-align:center;">平台</th><th style="text-align:center;">SDK 要求</th></tr></thead><tbody><tr><td style="text-align:center;">macOS</td><td style="text-align:center;">10.12</td></tr><tr><td style="text-align:center;">iOS</td><td style="text-align:center;">10.0</td></tr><tr><td style="text-align:center;">watchOS</td><td style="text-align:center;">3.0</td></tr><tr><td style="text-align:center;">tvOS</td><td style="text-align:center;">10.0</td></tr></tbody></table><p>Swift 编译器和 Xcode 强制要求最低部署版本为<code>iOS 7</code>或<code>macOS 10.9</code>，设置更早的部署版本会导致编译错误。</p><blockquote><p>注意<br> 由命令行构建的 Swift 可执行文件必须能在它的<code>@rpath</code>下找到 Swift 标准库，因此发布时需要同时包含 Swift 动态库。由 Xcode 构建的 Swift 可执行文件则自带静态链接的运行时库。</p></blockquote><p><a name="understanding_the_swift_import_process"></a></p><h2 id="理解-swift-导入过程" tabindex="-1">理解 Swift 导入过程 <a class="header-anchor" href="#理解-swift-导入过程" aria-label="Permalink to &quot;理解 Swift 导入过程&quot;">​</a></h2><p>在你建立 Xcode 项目后，可以在 Swift 里导入任何 Cocoa 或者 Cocoa Touch 的框架。</p><p>任何 Objective-C 框架或 C 语言类库，都将作为一个<code>module</code>直接导入到 Swift 中。这包括了所有 Objective-C 系统框架——比如 Foundation、UIKit 和 SpriteKit，以及系统支持的 C 语言类库。例如，想导入 Foundation，只要简单地添加导入语句到 Swift 文件的顶部：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foundation</span></span></code></pre></div><p>通过这个导入语句，Swift 文件现在可以访问所有 Foundation 中的类、协议、方法、属性以及常量。</p><p>导入过程非常简单。Objective-C 框架在头文件中公开 API。在 Swift，那些头文件被编译成 Objective-C 模块，接着被导入到 Swift 作为 Swift 的 API。导入过程决定了 Objective-C 代码中的函数、类、方法以及声明的类型如何在 Swift 中呈现。对于函数和方法，这个过程将影响它们的参数和返回值的类型。对于类型来说，导入过程会做以下处理：</p><ul><li>重映射 Objective-C 类型到 Swift 中的同等类型，例如<code>id</code>映射为<code>Any</code></li><li>重映射 Objective-C 核心类型到 Swift 中的替代类型，例如<code>NSString</code>映射为<code>String</code></li><li>重映射 Objective-C 概念到 Swift 中相对应的概念，例如指针映射为可选类型</li></ul><p>想了解更多信息，请参阅 <a href="./../02-Interoperability/01-Interacting with Objective-C APIs.html">与 Objective-C API 交互</a> 章节。</p><blockquote><p>注意<br> C++ 代码无法直接导入 Swift，必须为其创建 Objective-C 或者 C 的封装。</p></blockquote><p>导入 Swift 模块到 Objective-C 和上述过程非常相似。Swift 公开它的 API，例如来自系统框架的 API，作为 Swift 模块。随着这些 Swift 模块还会生成 Objective-C 头文件。这些头文件公开了那些可以映射回 Objective-C 的 API。一些 Swift API 无法映射回 Objective-C，因为它们使用了 Objective-C 中不存在的语言特性。</p><p>想了解更多信息，请参阅 <a href="./../03-Mix and Match/Swift and Objective-C in the Same Project.html">在项目中同时使用 Swift 和 Objective-C</a> 章节。</p>',32)]))}const h=e(n,[["render",d]]);export{w as __pageData,h as default};
