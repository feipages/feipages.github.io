import{_ as e,c as s,o as n,ag as t}from"./chunks/framework.BHpayLOB.js";const u=JSON.parse('{"title":"react 入门","description":"","frontmatter":{"layout":"post","title":"react 入门","subtitle":"基础","date":"2020-03-08T14:00:00.000Z","author":"Gao Fei","header-img":"/img/post-bg-ios9-web.jpg","tags":["git"]},"headers":[],"relativePath":"frontend/other/index.md","filePath":"frontend/other/index.md"}'),p={name:"frontend/other/index.md"};function l(i,a,o,r,c,d){return n(),s("div",null,a[0]||(a[0]=[t(`<h2 id="react-入门" tabindex="-1">React 入门 <a class="header-anchor" href="#react-入门" aria-label="Permalink to &quot;React 入门&quot;">​</a></h2><h3 id="_1-通过npm搭建开发环境" tabindex="-1">1. 通过npm搭建开发环境 <a class="header-anchor" href="#_1-通过npm搭建开发环境" aria-label="Permalink to &quot;1. 通过npm搭建开发环境&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ npm install babel -g</span></span>
<span class="line"><span>$ npm install webpack -g</span></span>
<span class="line"><span>$ npm install webpack-dev-server -g</span></span>
<span class="line"><span></span></span>
<span class="line"><span>如果使用以上命令报错</span></span>
<span class="line"><span>可以更换如下</span></span>
<span class="line"><span># 增加了访问本地目录的权限</span></span>
<span class="line"><span>$ sudo npm install webpack -g --unsafe-perm=true --allow-root</span></span>
<span class="line"><span>$ sudo npm install webpack-cli -g --unsafe-perm=true --allow-root</span></span>
<span class="line"><span>$ sudo npm install webpack-dev-server -g --unsafe-perm=true --allow-root</span></span>
<span class="line"><span># 切换到工程目录下</span></span>
<span class="line"><span>$ npm install @babel/preset-env --save-dev</span></span></code></pre></div><h3 id="_2-初始化项目" tabindex="-1">2. 初始化项目 <a class="header-anchor" href="#_2-初始化项目" aria-label="Permalink to &quot;2. 初始化项目&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># npm 6 以上的版本</span></span>
<span class="line"><span>$ npm init react-app my-app</span></span>
<span class="line"><span>#低版本的npm</span></span>
<span class="line"><span>$ npx create-react-app my-app</span></span>
<span class="line"><span>$ cd my-app</span></span>
<span class="line"><span>$ yarn start</span></span>
<span class="line"><span>$ npm start</span></span></code></pre></div><h3 id="_3-jsx-语法" tabindex="-1">3.JSX 语法 <a class="header-anchor" href="#_3-jsx-语法" aria-label="Permalink to &quot;3.JSX 语法&quot;">​</a></h3><p>使用jsx 来替代常规的js语法 javascript + XML语法(HTML)</p><h4 id="组件" tabindex="-1">组件 <a class="header-anchor" href="#组件" aria-label="Permalink to &quot;组件&quot;">​</a></h4><h4 id="声明" tabindex="-1">声明 <a class="header-anchor" href="#声明" aria-label="Permalink to &quot;声明&quot;">​</a></h4><p>函数组件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>function Welcome(props) {</span></span>
<span class="line"><span>  return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>class 组件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>class Welcome extends React.Component {</span></span>
<span class="line"><span>  render() {</span></span>
<span class="line"><span>    return &lt;h1&gt;Hello, {this.props.name}&lt;/h1&gt;;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>调用赋值</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;Welcome name=&quot;Sara&quot; /&gt;</span></span></code></pre></div><h4 id="props-属性" tabindex="-1">props 属性 <a class="header-anchor" href="#props-属性" aria-label="Permalink to &quot;props 属性&quot;">​</a></h4><p>通过props 属性 添加</p><h4 id="事件处理" tabindex="-1">事件处理 <a class="header-anchor" href="#事件处理" aria-label="Permalink to &quot;事件处理&quot;">​</a></h4><p>this 向事件传递参数</p><h4 id="state" tabindex="-1">state <a class="header-anchor" href="#state" aria-label="Permalink to &quot;state&quot;">​</a></h4><h4 id="生命周期函数" tabindex="-1">生命周期函数 <a class="header-anchor" href="#生命周期函数" aria-label="Permalink to &quot;生命周期函数&quot;">​</a></h4><p>组件的生命周期可分成三个状态:</p><ul><li>Mounting：已插入真实 DOM;</li><li>Updating：正在被重新渲染;</li><li>Unmounting：已移出真实 DOM.</li></ul><p>生命周期的方法有：</p><ul><li>componentWillMount 在渲染前调用,在客户端也在服务端。</li><li>componentDidMount : 在第一次渲染后调用，只在客户端。之后组件已经生成了对应的DOM结构，可以通过this.getDOMNode()来进行访问。 如果你想和其他JavaScript框架一起使用，可以在这个方法中调用setTimeout, setInterval或者发送AJAX请求等操作(防止异步操作阻塞UI)。</li><li>componentWillReceiveProps 在组件接收到一个新的 prop (更新后)时被调用。这个方法在初始化render时不会被调用。</li><li>shouldComponentUpdate 返回一个布尔值。在组件接收到新的props或者state时被调用。在初始化时或者使用forceUpdate时不被调用。 可以在你确认不需要更新组件时使用。</li><li>componentWillUpdate在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用。</li><li>componentDidUpdate 在组件完成更新后立即调用。在初始化时不会被调用。</li><li>componentWillUnmount在组件从 DOM 中移除之前立刻被调用</li></ul><p>子传父 传值 父传子 传值</p><h4 id="setstate-更新时同步还是异步" tabindex="-1">setState 更新时同步还是异步 <a class="header-anchor" href="#setstate-更新时同步还是异步" aria-label="Permalink to &quot;setState 更新时同步还是异步&quot;">​</a></h4><ol><li>setState 会引起视图的重绘</li><li>组件</li></ol><h4 id="条件渲染" tabindex="-1">条件渲染 <a class="header-anchor" href="#条件渲染" aria-label="Permalink to &quot;条件渲染&quot;">​</a></h4><h4 id="列表-key" tabindex="-1">列表 &amp; key <a class="header-anchor" href="#列表-key" aria-label="Permalink to &quot;列表 &amp; key&quot;">​</a></h4><h4 id="导入-antd" tabindex="-1">导入 antd <a class="header-anchor" href="#导入-antd" aria-label="Permalink to &quot;导入 antd&quot;">​</a></h4><h4 id="fetch" tabindex="-1">Fetch <a class="header-anchor" href="#fetch" aria-label="Permalink to &quot;Fetch&quot;">​</a></h4><p>get/post 跨域的问题 package 配置</p><h4 id="router" tabindex="-1">Router <a class="header-anchor" href="#router" aria-label="Permalink to &quot;Router&quot;">​</a></h4><p>安装</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ npm install react-router-dom --save</span></span></code></pre></div><p>路由的作用 单页面 应用（SPA）,路由的作用为切换视图、删除视图</p><h4 id="redux" tabindex="-1">Redux <a class="header-anchor" href="#redux" aria-label="Permalink to &quot;Redux&quot;">​</a></h4>`,38)]))}const m=e(p,[["render",l]]);export{u as __pageData,m as default};
