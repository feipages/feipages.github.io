import{_ as i,c as t,o as a,ag as o}from"./chunks/framework.BHpayLOB.js";const f=JSON.parse('{"title":"迁移 Objective-C 代码到 Swift","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/swift/04-Migration/Migrating Your Objective-C Code to Swift.md","filePath":"frontend/swift/04-Migration/Migrating Your Objective-C Code to Swift.md"}'),r={name:"frontend/swift/04-Migration/Migrating Your Objective-C Code to Swift.md"};function c(l,e,n,s,p,d){return a(),t("div",null,e[0]||(e[0]=[o(`<h1 id="迁移-objective-c-代码到-swift" tabindex="-1">迁移 Objective-C 代码到 Swift <a class="header-anchor" href="#迁移-objective-c-代码到-swift" aria-label="Permalink to &quot;迁移 Objective-C 代码到 Swift&quot;">​</a></h1><ul><li><a href="#preparing_your_objective-c_code_for_migration">为 Objective-C 代码做好迁移准备</a></li><li><a href="#the_migration_process">迁移过程</a><ul><li><a href="#before_you_start">准备迁移</a></li><li><a href="#as_you_work">开始迁移</a></li><li><a href="#after_you_finish">完成迁移</a></li></ul></li><li><a href="#troubleshooting_tips_and_reminders">故障排除贴士</a></li></ul><p>迁移工作提供了一个重新审视现有的 Objective-C 应用程序的机会，通过用 Swift 代码替换 Objective-C 代码来改善程序的架构，逻辑以及性能。简而言之，通过之前学习的工具，即混搭和互用来对应用程序进行增量迁移。在决定哪些特性和功能用 Swift 实现，哪些依然用 Objective-C 实现时，混搭和互用会让这一切变得简单可行。通过这些工具，可以一步步探索 Swift 广泛的功能并整合到现有的 Objective-C 应用程序中，而不必立刻使用 Swift 重写整个应用程序。</p><p><a name="preparing_your_objective-c_code_for_migration"></a></p><h2 id="为-objective-c-代码做好迁移准备" tabindex="-1">为 Objective-C 代码做好迁移准备 <a class="header-anchor" href="#为-objective-c-代码做好迁移准备" aria-label="Permalink to &quot;为 Objective-C 代码做好迁移准备&quot;">​</a></h2><p>在开始迁移代码之前，请确保 Objective-C 和 Swift 代码间有着最佳兼容性。这意味着你可能需要整理现有项目，并将 Objective-C 现代化特性应用其中。为了更好地与 Swift 无缝交互，现有的 Objective-C 代码需要遵循现代编码实践。在开始前，这有个简短的实践列表，请参阅 <a href="https://developer.apple.com/library/prerelease/ios/releasenotes/ObjectiveC/ModernizationObjC/AdoptingModernObjective-C/AdoptingModernObjective-C.html#//apple_ref/doc/uid/TP40014150" target="_blank" rel="noreferrer"><em>Adopting Mordern Objective-C</em></a>。</p><p><a name="the_migration_process"></a></p><h2 id="迁移过程" tabindex="-1">迁移过程 <a class="header-anchor" href="#迁移过程" aria-label="Permalink to &quot;迁移过程&quot;">​</a></h2><p>迁移代码到 Swift 的最有效的方式是逐个文件迁移，即一次迁移一个类。由于无法在 Objective-C 中继承 Swift 类，因此最好选择一个没有子类的类开始。使用单个<code>.swift</code>文件替换对应的<code>.m</code>和<code>.h</code>文件，实现和接口将直接放进这个 Swift 文件。你也不用创建头文件，Xcode 会在你需要引用头文件的时候自动生成头文件。</p><p><a name="before_you_start"></a></p><h3 id="准备迁移" tabindex="-1">准备迁移 <a class="header-anchor" href="#准备迁移" aria-label="Permalink to &quot;准备迁移&quot;">​</a></h3><ul><li><p>在 Xcode 中，选择<code>File &gt; New &gt; File &gt; (iOS，watchOS，tvOS，macOS) &gt; Source &gt; Swift File</code>为对应的 Objective-C <code>.m</code>和<code>.h</code>文件创建一个 Swift 类。可以使用相同或者不同的类名。类前缀在 Swift 中不是必须的。</p></li><li><p>导入相关的系统框架。</p></li><li><p>如果需要在 Swift 文件中使用同一 target 中的 Objective-C 代码，可以填写一个 Objective-C 桥接头文件。具体的操作步骤，请参阅<a href="./../03-Mix and Match/Swift and Objective-C in the Same Project.html#importing_code_from_within_the_same_app_target">在应用程序的 target 中导入代码</a>小节。</p></li><li><p>为了让 Swift 类能在 Objective-C 中使用，Swift 类必须继承自 Objective-C 类。如果想为 Swift 类指定在 Objective-C 中的类名，可以使用<code>@objc(name)</code>特性，<code>name</code>就是 Swift 类在 Objective-C 中的类名。关于<code>@objc</code>的更多信息，请参阅<a href="./../02-Interoperability/01-Interacting with Objective-C APIs.html#swift_type_compatibility">Swift 类型兼容性</a>小节。</p></li></ul><p><a name="as_you_work"></a></p><h3 id="开始迁移" tabindex="-1">开始迁移 <a class="header-anchor" href="#开始迁移" aria-label="Permalink to &quot;开始迁移&quot;">​</a></h3><ul><li><p>可以通过继承 Objective-C 类，采用 Objective-C 协议，或者其他方式，来让 Swift 类集成 Objective-C 特性。更多信息请参阅<a href="./../02-Interoperability/02-Writing Swift Classes and Protocols with Objective-C Behavior.html">使用 Objective-C 特性编写 Swift 类和协议</a>章节。</p></li><li><p>使用 Objective-C API 的时候，你需要知道 Swift 是怎样转化某些 Objective-C 语言特性的。更多信息请参阅<a href="./../02-Interoperability/01-Interacting with Objective-C APIs.html">与 Objective-C API 交互</a>章节。</p></li></ul><ul><li><p>使用 Cocoa 设计模式的时候，请参阅<a href="./../02-Interoperability/04-Adopting Cocoa Design Patterns.html">采用 Cocoa 设计模式</a>章节。</p></li><li><p>对于如何将属性从 Objective-C 转换到 Swift，请参阅 <a href="http://wiki.jikexueyuan.com/project/swift/" target="_blank" rel="noreferrer"><em>The Swift Programming Language 中文版</em></a> 中的<a href="http://wiki.jikexueyuan.com/project/swift/chapter2/10_Properties.html" target="_blank" rel="noreferrer">属性</a>章节。</p></li><li><p>在需要的时候，使用<code>@objc(name)</code>特性为 Swift 中的属性或方法提供 Objective-C 命名。例如，可以像下面这样将<code>enabled</code>属性的取值方法在 Objective-C 中的命名更改为<code>isEnabled</code>：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> enabled: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	@objc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>分别用<code>func</code>和<code>class func</code>来声明实例方法（<code>-</code>）和类方法（<code>+</code>）。</p></li><li><p>将简单宏声明为全局常量，将复杂宏声明为函数。</p></li></ul><p><a name="after_you_finish"></a></p><h3 id="完成迁移" tabindex="-1">完成迁移 <a class="header-anchor" href="#完成迁移" aria-label="Permalink to &quot;完成迁移&quot;">​</a></h3><ul><li><p>将 Objective-C 代码中对应的导入语句更改为<code>#import &quot;ProductModuleName-Swift.h&quot;</code>，更多信息请参阅<a href="./../03-Mix and Match/Swift and Objective-C in the Same Project.html#importing_code_from_within_the_same_app_target">在应用程序的 target 中导入代码</a>小节。</p></li><li><p>将原始的 Objective-C <code>.m</code>文件在<code>Target Membership</code>选择框中的勾选取消，从而将其从 target 中移除。不要立刻删除<code>.m</code>和<code>.h</code>文件，以备解决问题时使用。</p></li><li><p>如果为 Swift 类起了一个新的类名，在相关代码中请使用新的 Swift 类名代替原来的 Objective-C 类名。</p></li></ul><p><a name="troubleshooting_tips_and_reminders"></a></p><h2 id="故障排除贴士" tabindex="-1">故障排除贴士 <a class="header-anchor" href="#故障排除贴士" aria-label="Permalink to &quot;故障排除贴士&quot;">​</a></h2><p>尽管对于不同的项目，迁移过程是不尽相同的，但仍有一些通用的办法能解决代码迁移时遇到的问题：</p><ul><li><p>无法在 Objective-C 中继承 Swift 类。因此，被迁移的类不能有任何 Objective-C 子类。</p></li><li><p>迁移一个类到 Swift 时，必须从 target 中移除相关的<code>.m</code>文件，避免编译时出现符号重复的错误。</p></li><li><p>为了能在 Objective-C 中使用，Swift 类必须是一个 Objective-C 类的子类。</p></li><li><p>在将 Swift 代码导入 Objective-C 代码时，切记 Objective-C 不能转化某些 Swift 的独有特性。详细列表请参阅<a href="./../03-Mix and Match/Swift and Objective-C in the Same Project.html#using_swift_from_objective-c">在 Objective-C 中使用 Swift</a>小节。</p></li><li><p>可以在 Objective-C 代码中通过<code>Commond + 单击</code>一个 Swift 类名的方式来查看 Xcode 为它自动生成的头文件。</p></li><li><p>可以<code>Option + 单击</code>一个符号来查看它的详细信息，比如它的类型，特性以及文档注释等。</p></li></ul>`,23)]))}const b=i(r,[["render",c]]);export{f as __pageData,b as default};
