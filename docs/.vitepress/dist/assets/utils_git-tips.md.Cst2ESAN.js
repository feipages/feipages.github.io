import{_ as n,c as a,o as p,ag as e}from"./chunks/framework.BHpayLOB.js";const d=JSON.parse('{"title":"git 使用汇总","description":"","frontmatter":{},"headers":[],"relativePath":"utils/git-tips.md","filePath":"utils/git-tips.md"}'),i={name:"utils/git-tips.md"};function l(t,s,c,o,r,g){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="git-使用汇总" tabindex="-1">git 使用汇总 <a class="header-anchor" href="#git-使用汇总" aria-label="Permalink to &quot;git 使用汇总&quot;">​</a></h1><h2 id="git配置多个ssh-key" tabindex="-1">Git配置多个SSH-Key <a class="header-anchor" href="#git配置多个ssh-key" aria-label="Permalink to &quot;Git配置多个SSH-Key&quot;">​</a></h2><p>当有多个git账号时，比如：</p><p>a. 一个gitlab，用于公司内部的工作开发;</p><p>b. 一个github，用于自己进行一些开发活动;</p><h3 id="解决方法" tabindex="-1">解决方法 <a class="header-anchor" href="#解决方法" aria-label="Permalink to &quot;解决方法&quot;">​</a></h3><p>(1) 生成一个公司用的SSH-Key</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 在~/.ssh/目录会生成gitlab_id-rsa和gitlab_id-rsa.pub私钥和公钥。我们将gitlab_id-rsa.pub中的内容粘帖到公司GitLab服务器的SSH-key的配置中</span></span>
<span class="line"><span>$ ssh-keygen -t rsa -C &#39;xxxxx@company.com&#39; -f ~/.ssh/gitlab_id_rsa</span></span></code></pre></div><p>(2) 生成一个github用的SSH-Key</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ssh-keygen -t rsa -C &#39;xxxxx@qq.com&#39; -f ~/.ssh/github_id_rsa</span></span></code></pre></div><p>(3) 在 ~/.ssh 目录下新建一个config文件，添加如下内容（其中Host和HostName填写git服务器的域名，IdentityFile指定私钥的路径）</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 添加config配置文件</span></span>
<span class="line"><span># vi ~/.ssh/config</span></span>
<span class="line"><span># 或者</span></span>
<span class="line"><span># touch ~/.ssh/config</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 文件内容如下</span></span>
<span class="line"><span># gitlab</span></span>
<span class="line"><span>Host gitlab.com</span></span>
<span class="line"><span>HostName gitlab.com</span></span>
<span class="line"><span>PreferredAuthentications publickey</span></span>
<span class="line"><span>IdentityFile ~/.ssh/gitlab_id_rsa</span></span>
<span class="line"><span># github</span></span>
<span class="line"><span>Host github.com</span></span>
<span class="line"><span>HostName github.com</span></span>
<span class="line"><span>PreferredAuthentications publickey</span></span>
<span class="line"><span>IdentityFile ~/.ssh/github_id_rsa</span></span></code></pre></div><p>(4) 用ssh命令分别测试</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ ssh -T git@gitlab.com</span></span>
<span class="line"><span>$ ssh -T git@github.com</span></span></code></pre></div><h2 id="常见的git命令" tabindex="-1">常见的git命令 <a class="header-anchor" href="#常见的git命令" aria-label="Permalink to &quot;常见的git命令&quot;">​</a></h2><h3 id="新建代码库" tabindex="-1">新建代码库 <a class="header-anchor" href="#新建代码库" aria-label="Permalink to &quot;新建代码库&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 在当前目录新建一个Git代码库</span></span>
<span class="line"><span>$ git init</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 新建一个目录，将其初始化为Git代码库</span></span>
<span class="line"><span>$ git init [project-name]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 下载一个项目和它的整个代码历史</span></span>
<span class="line"><span>$ git clone [url]</span></span></code></pre></div><h3 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 显示当前的Git配置</span></span>
<span class="line"><span>$ git config --list</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 编辑Git配置文件</span></span>
<span class="line"><span>$ git config -e [--global]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 设置提交代码时的用户信息</span></span>
<span class="line"><span>$ git config [--global] user.name &quot;[name]&quot;</span></span>
<span class="line"><span>$ git config [--global] user.email &quot;[email address]&quot;</span></span></code></pre></div><h3 id="增加-删除文件" tabindex="-1">增加/删除文件 <a class="header-anchor" href="#增加-删除文件" aria-label="Permalink to &quot;增加/删除文件&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 添加指定文件到暂存区</span></span>
<span class="line"><span>$ git add [file1] [file2] ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 添加指定目录到暂存区，包括子目录</span></span>
<span class="line"><span>$ git add [dir]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 添加当前目录的所有文件到暂存区</span></span>
<span class="line"><span>$ git add .</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 添加每个变化前，都会要求确认</span></span>
<span class="line"><span># 对于同一个文件的多处变化，可以实现分次提交</span></span>
<span class="line"><span>$ git add -p</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 删除工作区文件，并且将这次删除放入暂存区</span></span>
<span class="line"><span>$ git rm [file1] [file2] ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 停止追踪指定文件，但该文件会保留在工作区</span></span>
<span class="line"><span>$ git rm --cached [file]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 改名文件，并且将这个改名放入暂存区</span></span>
<span class="line"><span>$ git mv [file-original] [file-renamed]</span></span></code></pre></div><h3 id="代码提交" tabindex="-1">代码提交 <a class="header-anchor" href="#代码提交" aria-label="Permalink to &quot;代码提交&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 提交暂存区到仓库区</span></span>
<span class="line"><span>$ git commit -m [message]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 提交暂存区的指定文件到仓库区</span></span>
<span class="line"><span>$ git commit [file1] [file2] ... -m [message]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 提交工作区自上次commit之后的变化，直接到仓库区</span></span>
<span class="line"><span>$ git commit -a</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 提交时显示所有diff信息</span></span>
<span class="line"><span>$ git commit -v</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 使用一次新的commit，替代上一次提交</span></span>
<span class="line"><span># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span>
<span class="line"><span>$ git commit --amend -m [message]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 重做上一次commit，并包括指定文件的新变化</span></span>
<span class="line"><span>$ git commit --amend [file1] [file2] ...</span></span></code></pre></div><h3 id="分支" tabindex="-1">分支 <a class="header-anchor" href="#分支" aria-label="Permalink to &quot;分支&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 列出所有本地分支</span></span>
<span class="line"><span>$ git branch</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 列出所有远程分支</span></span>
<span class="line"><span>$ git branch -r</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 列出所有本地分支和远程分支</span></span>
<span class="line"><span>$ git branch -a</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 新建一个分支，但依然停留在当前分支</span></span>
<span class="line"><span>$ git branch [branch-name]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 新建一个分支，并切换到该分支</span></span>
<span class="line"><span>$ git checkout -b [branch]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 新建一个分支，指向指定commit</span></span>
<span class="line"><span>$ git branch [branch] [commit]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 新建一个分支，与指定的远程分支建立追踪关系</span></span>
<span class="line"><span>$ git branch --track [branch] [remote-branch]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 切换到指定分支，并更新工作区</span></span>
<span class="line"><span>$ git checkout [branch-name]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 切换到上一个分支</span></span>
<span class="line"><span>$ git checkout -</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 建立追踪关系，在现有分支与指定的远程分支之间</span></span>
<span class="line"><span>$ git branch --set-upstream [branch] [remote-branch]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 合并指定分支到当前分支</span></span>
<span class="line"><span>$ git merge [branch]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 选择一个commit，合并进当前分支</span></span>
<span class="line"><span>$ git cherry-pick [commit]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 删除分支</span></span>
<span class="line"><span>$ git branch -d [branch-name]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 删除远程分支</span></span>
<span class="line"><span>$ git push origin --delete [branch-name]</span></span>
<span class="line"><span>$ git branch -dr [remote/branch]</span></span></code></pre></div><h3 id="标签" tabindex="-1">标签 <a class="header-anchor" href="#标签" aria-label="Permalink to &quot;标签&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 列出所有tag</span></span>
<span class="line"><span>$ git tag</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 新建一个tag在当前commit</span></span>
<span class="line"><span>$ git tag [tag]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 新建一个tag在指定commit</span></span>
<span class="line"><span>$ git tag [tag] [commit]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 删除本地tag</span></span>
<span class="line"><span>$ git tag -d [tag]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 删除远程tag</span></span>
<span class="line"><span>$ git push origin :refs/tags/[tagName]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 查看tag信息</span></span>
<span class="line"><span>$ git show [tag]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 提交指定tag</span></span>
<span class="line"><span>$ git push [remote] [tag]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 提交所有tag</span></span>
<span class="line"><span>$ git push [remote] --tags</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 新建一个分支，指向某个tag</span></span>
<span class="line"><span>$ git checkout -b [branch] [tag]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 切换为由远程创建的分支</span></span>
<span class="line"><span>$ git checkout -b [branch] [remote/branch]</span></span></code></pre></div><h4 id="查看信息" tabindex="-1">查看信息 <a class="header-anchor" href="#查看信息" aria-label="Permalink to &quot;查看信息&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 显示有变更的文件</span></span>
<span class="line"><span>$ git status</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 显示当前分支的版本历史</span></span>
<span class="line"><span>$ git log</span></span></code></pre></div><h4 id="远程同步" tabindex="-1">远程同步 <a class="header-anchor" href="#远程同步" aria-label="Permalink to &quot;远程同步&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 下载远程仓库的所有变动</span></span>
<span class="line"><span>$ git fetch [remote]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 显示所有远程仓库</span></span>
<span class="line"><span>$ git remote -v</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 显示某个远程仓库的信息</span></span>
<span class="line"><span>$ git remote show [remote]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 增加一个新的远程仓库，并命名</span></span>
<span class="line"><span>$ git remote add [shortname] [url]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 更新远程仓库地址</span></span>
<span class="line"><span>$ git remote set-url [shortname] [url]</span></span>
<span class="line"><span>$ git remote set-url origin http://originproject.git</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 修改远程仓库名</span></span>
<span class="line"><span>$ git remote rename [current-shortname] [new-shortname]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 取回远程仓库的变化，并与本地分支合并，</span></span>
<span class="line"><span>$ git pull [remote] [branch]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 上传本地指定分支到远程仓库，默认提交到与本地分支对应的远程分支上</span></span>
<span class="line"><span>$ git push [remote] [branch]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>上传本地指定分支到远程仓库，创建与到与本地分支对应的远程分支上</span></span>
<span class="line"><span>$  git push --set-upstream [remote] [branch]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 强行推送当前分支到远程仓库，即使有冲突</span></span>
<span class="line"><span>$ git push [remote] --force</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 推送所有分支到远程仓库</span></span>
<span class="line"><span>$ git push [remote] --all</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 推送某一个commit 到远程仓库</span></span>
<span class="line"><span>$ git push [remote name] [commit hash]:[remote branch name]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 推送所有tag到远程仓库</span></span>
<span class="line"><span>$ git push [remote] --tags</span></span></code></pre></div><h4 id="回滚" tabindex="-1">回滚 <a class="header-anchor" href="#回滚" aria-label="Permalink to &quot;回滚&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 回退到上个版本</span></span>
<span class="line"><span>$ git reset --hard HEAD^</span></span>
<span class="line"><span># 回退到前3次提交之前，以此类推，回退到n次提交之前  </span></span>
<span class="line"><span>$ git reset --hard HEAD~3</span></span>
<span class="line"><span># 退到/进到 指定commit的sha码        </span></span>
<span class="line"><span>$ git reset --hard [commit_id] </span></span>
<span class="line"><span># 强制推到远程</span></span>
<span class="line"><span>$ git push origin HEAD --force</span></span></code></pre></div><p>date: 2019-04-15 14:00:00 author: &quot;Gao Fei&quot;</p><h2 id="pull-request-基本操作流程" tabindex="-1">pull request 基本操作流程 <a class="header-anchor" href="#pull-request-基本操作流程" aria-label="Permalink to &quot;pull request 基本操作流程&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;!--远程代码--&gt;</span></span>
<span class="line"><span>$ git remote -v</span></span>
<span class="line"><span></span></span>
<span class="line"><span>origin	http://58.250.71.52:8081/gaofei/FSMobileAssistant.git (fetch)</span></span>
<span class="line"><span>origin	http://58.250.71.52:8081/gaofei/FSMobileAssistant.git (push)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git remote add http://58.250.71.52:8081/iOS_Group/FSMobileAssistant.git</span></span>
<span class="line"><span></span></span>
<span class="line"><span>usage: git remote add [&lt;options&gt;] &lt;name&gt; &lt;url&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>\`-f, --fetch           fetch the remote branches</span></span>
<span class="line"><span>    --tags                import all tags and associated objects when fetching</span></span>
<span class="line"><span>                          or do not fetch any tag at all (--no-tags)</span></span>
<span class="line"><span>    -t, --track &lt;branch&gt;  branch(es) to track</span></span>
<span class="line"><span>    -m, --master &lt;branch&gt;</span></span>
<span class="line"><span>                          master branch</span></span>
<span class="line"><span>    --mirror[=&lt;push|fetch&gt;]</span></span>
<span class="line"><span>                          set up remote as a mirror to push to or fetch from\`</span></span>
<span class="line"><span>                          </span></span>
<span class="line"><span>$ git remote add upstream http://58.250.71.52:8081/iOS_Group/FSMobileAssistant.git</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$ git remote -v</span></span>
<span class="line"><span></span></span>
<span class="line"><span>origin	http://58\`.250.71.52:8081/gaofei/FSMobileAssistant.git (fetch)</span></span>
<span class="line"><span>origin	http://58.250.71.52:8081/gaofei/FSMobileAssistant.git (push)</span></span>
<span class="line"><span>upstream	http://58.250.71.52:8081/iOS_Group/FSMobileAssistant.git (fetch)</span></span>
<span class="line"><span>upstream	http://58.250.71.52:8081/iOS_Group/FSMobileAssistant.git (push)\`</span></span>
<span class="line"><span>bogon:FSMobileAssistant awei$ git fetch --all</span></span>
<span class="line"><span></span></span>
<span class="line"><span>\`Fetching origin</span></span>
<span class="line"><span>Fetching upstream</span></span>
<span class="line"><span>remote: Counting objects: 166, done.</span></span>
<span class="line"><span>remote: Compressing objects: 100% (98/98), done.</span></span>
<span class="line"><span>remote: Total 166 (delta 124), reused 99 (delta 66)</span></span>
<span class="line"><span>Receiving objects: 100% (166/166), 69.78 KiB | 0 bytes/s, done.</span></span>
<span class="line"><span>Resolving deltas: 100% (124/124), completed with 48 local objects.</span></span>
<span class="line"><span>From http://58.250.71.52:8081/iOS_Group/FSMobileAssistant</span></span>
<span class="line"><span> * [new branch]      master     -&gt; upstream/master</span></span>
<span class="line"><span> * [new branch]      mvvm       -&gt; upstream/mvvm\`</span></span>
<span class="line"><span>$ git merge upstream/master origin/master</span></span>
<span class="line"><span>\`Auto-merging MobileAssistant/Vendors/XHDatePicker/XHDatePickerView.m</span></span>
<span class="line"><span>Auto-merging MobileAssistant/Vendors/FSAlertTools/FSAlertTools.m</span></span>
<span class="line"><span>Auto-merging MobileAssistant/Vendors/FSAlertTools/FSAlertTools.h</span></span>
<span class="line"><span>CONFLICT (modify/delete): MobileAssistant/Util/AlertUtil.m deleted in upstream/master and modified in HEAD. Version HEAD of MobileAssistant/Util/AlertUtil.m left in tree.</span></span>
<span class="line"><span>CONFLICT (modify/delete): MobileAssistant/Util/AlertUtil.h deleted in upstream/master and modified in HEAD. Version HEAD of MobileAssistant/Util/AlertUtil.h left in tree.</span></span>
<span class="line"><span>Auto-merging MobileAssistant/Sections/Personal Center/ViewController/AboutVC.m</span></span>
<span class="line"><span>Auto-merging MobileAssistant/Sections/Personal Center/TouchIDUtil/TouchIDUtil.m</span></span>
<span class="line"><span>Auto-merging MobileAssistant/Sections/Personal Center/TouchIDUtil/KeyChainManager.m</span></span>
<span class="line"><span>Auto-merging MobileAssistant/Sections/Personal Center/LoginAndRegister/ViewController/SetNewPwdVC.m</span></span>
<span class="line"><span>Auto-merging MobileAssistant/Sections/Personal Center/LoginAndRegister/ViewController/RegisterVC.m</span></span>
<span class="line"><span>Auto-merging MobileAssistant/Sections/Personal Center/LoginAndRegister/ViewController/PwdInputVC.m</span></span>
<span class="line"><span>Auto-merging MobileAssistant/Sections/Personal Center/LoginAndRegister/ViewController/ForgetPwdVC.m</span></span>
<span class="line"><span>Auto-merging MobileAssistant/Sections/Main/CompanyInfo/Controller/FSCompanyInfoController.m</span></span>
<span class="line"><span>Auto-merging MobileAssistant/Sections/Approval/CustomerUI/DetailView/ADetailReasonCell.m</span></span>
<span class="line"><span>Auto-merging MobileAssistant/Sections/Approval/CustomerUI/DetailView/ADetailNameCell.m</span></span>
<span class="line"><span>Auto-merging MobileAssistant/Sections/Approval/CustomerUI/DetailView/ADetailDescriptionCell.m</span></span>
<span class="line"><span>Automatic merge failed; fix conflicts and then commit the result.\`</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>整体流程如下：</span></span>
<span class="line"><span>第一步：</span></span>
<span class="line"><span>bogon:FSMobileAssistant awei$ git add .</span></span>
<span class="line"><span>第二步：</span></span>
<span class="line"><span>bogon:FSMobileAssistant awei$ git commit -m &quot;sure delete AlertUtil&quot;</span></span>
<span class="line"><span>[master b989627] sure delete AlertUtil</span></span>
<span class="line"><span>第三步：</span></span>
<span class="line"><span>bogon:FSMobileAssistant awei$ git fetch --all</span></span>
<span class="line"><span>Fetching origin</span></span>
<span class="line"><span>Fetching upstream</span></span>
<span class="line"><span>第四步：</span></span>
<span class="line"><span>bogon:FSMobileAssistant awei$ git merge upstream/master origin/master</span></span>
<span class="line"><span>Already up-to-date.</span></span>
<span class="line"><span>第五步：</span></span>
<span class="line"><span>bogon:FSMobileAssistant awei$ git push\`</span></span>
<span class="line"><span>\`Counting objects: 209, done.</span></span>
<span class="line"><span>Delta compression using up to 4 threads.</span></span>
<span class="line"><span>Compressing objects: 100% (84/84), done.</span></span>
<span class="line"><span>Writing objects: 100% (209/209), 171.21 KiB | 0 bytes/s, done.</span></span>
<span class="line"><span>Total 209 (delta 153), reused 162 (delta 123)</span></span>
<span class="line"><span>To http://58.250.71.52:8081/gaofei/FSMobileAssistant.git</span></span>
<span class="line"><span>   1e7ae50..b989627  master -&gt; master</span></span>
<span class="line"><span>bogon:FSMobileAssistant awei$</span></span></code></pre></div><h2 id="一-在合并远程代码的时候-或许会出现以下问题" tabindex="-1">一. 在合并远程代码的时候，或许会出现以下问题： <a class="header-anchor" href="#一-在合并远程代码的时候-或许会出现以下问题" aria-label="Permalink to &quot;一. 在合并远程代码的时候，或许会出现以下问题：&quot;">​</a></h2><p>I&#39;m in the process of learning github on mac (command-line) and whenever I do git pull origin master i get this</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Please enter a commit message to explain why this merge is necessary,</span></span>
<span class="line"><span># especially if it merges an updated upstream into a topic branch.</span></span>
<span class="line"><span>#</span></span>
<span class="line"><span># Lines starting with &#39;#&#39; will be ignored, and an empty message aborts</span></span>
<span class="line"><span># the commit.</span></span>
<span class="line"><span>~                                                                               </span></span>
<span class="line"><span>~                                                                               </span></span>
<span class="line"><span>~                                                                               </span></span>
<span class="line"><span>~                                                                               </span></span>
<span class="line"><span>~                                                                               </span></span>
<span class="line"><span>~                                                                               </span></span>
<span class="line"><span>~                                                                               </span></span>
<span class="line"><span>~                                                                               </span></span>
<span class="line"><span>~                                                                               </span></span>
<span class="line"><span>~                                                                               </span></span>
<span class="line"><span>~                                                                               </span></span>
<span class="line"><span>~                                                                               </span></span>
<span class="line"><span>~                                                                               </span></span>
<span class="line"><span>~                                                                               </span></span>
<span class="line"><span>~                                                                               </span></span>
<span class="line"><span>~                                                                               </span></span>
<span class="line"><span>&quot;.git/MERGE_MSG&quot; 7L, 293C</span></span></code></pre></div><p>两种解决方式： 方式一：</p><p>You&#39;re in the text editor, vim! It&#39;s a modal text editor, so you would need to:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>	1.	Press ==i== to enter insert mode.</span></span>
<span class="line"><span>	2.	Now you can type your message, as if you were in a normal (non-modal) text editor.</span></span>
<span class="line"><span>	3.	Press ==esc== to go back to command mode.</span></span>
<span class="line"><span>	4.	Then type *:w* followed by ==enter== to save.</span></span>
<span class="line"><span>	5.	Finally *:q* followed by ==enter== to quit.</span></span></code></pre></div><p>方式二：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Make it simple.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Type *:wq* and ==enter==</span></span></code></pre></div><p>2017-04-20 高飞</p>`,47)]))}const m=n(i,[["render",l]]);export{d as __pageData,m as default};
