import{_ as s,c as a,o as t,ag as e}from"./chunks/framework.BHpayLOB.js";const n="/assets/DAG_2x.NtzGJ5bn.png",l="/assets/bridgingheader_2x.CFOipoi_.png",E=JSON.parse('{"title":"在项目中同时使用 Swift 和 Objective-C","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/swift/03-Mix and Match/Swift and Objective-C in the Same Project.md","filePath":"frontend/swift/03-Mix and Match/Swift and Objective-C in the Same Project.md"}'),h={name:"frontend/swift/03-Mix and Match/Swift and Objective-C in the Same Project.md"};function p(k,i,c,r,d,o){return t(),a("div",null,i[0]||(i[0]=[e('<h1 id="在项目中同时使用-swift-和-objective-c" tabindex="-1">在项目中同时使用 Swift 和 Objective-C <a class="header-anchor" href="#在项目中同时使用-swift-和-objective-c" aria-label="Permalink to &quot;在项目中同时使用 Swift 和 Objective-C&quot;">​</a></h1><ul><li><a href="#mix_and_match_overview">混搭概述</a></li><li><a href="#importing_code_from_within_the_same_app_target">在应用程序 target 中导入代码</a><ul><li><a href="#importing_objective_c_into_swift">将 Objective-C 代码导入到 Swift</a></li><li><a href="#importing_swift_into_objective_c">将 Swift 代码导入到 Objective-C</a></li></ul></li><li><a href="#importing_code_from_within_the_same_framework_target">在框架 target 中导入代码</a><ul><li><a href="#importing_objective_c_into_swift_2">将 Objective-C 代码导入到 Swift</a></li><li><a href="#importing_swift_into_objective_c_2">将 Swift 代码导入到 Objective-C</a></li></ul></li><li><a href="#importing_external_frameworks">导入外部框架</a></li><li><a href="#using_swift_from_objective-c">在 Objective-C 中使用 Swift</a><ul><li><a href="#referencing_a_swift_class_or_protocol_in_an_objective_c_header">在 Objective-C 头文件中引用 Swift 类或协议</a></li><li><a href="#declaring_a_swift_protocol_that_can_be_adopted_by_an_objective_c_class">声明可被 Objective-C 类遵守的 Swift 协议</a></li><li><a href="#adopting_a_swift_protocol_in_an_objective_c_implementation">在 Objective-C 的实现文件中采用 Swift 协议</a></li><li><a href="#declaring_a_swift_error_type_that_can_be_used_from_objective_c">声明可在 Objective-C 中使用的 Swift 错误类型</a></li></ul></li><li><a href="#overriding_swift_names_for_objective_c_interfaces">为 Objective-C 接口提供 Swift 命名</a><ul><li><a href="#class_factory_methods">类工厂方法</a></li><li><a href="#enumerations">枚举</a></li></ul></li><li><a href="#making_objective_c_interfaces_unavailable_in_swift">让 Objective-C 接口在 Swift 中不可用</a></li><li><a href="#refining_objective_c_declarations">优化 Objective-C 声明</a></li><li><a href="#adding_availability_information_to_objective_c_apis">将可用性信息添加到 Objective-C API</a></li><li><a href="#naming_your_product_module">为产品模块命名</a></li><li><a href="#troubleshooting_tips_and_reminders">故障排除贴士</a></li></ul><p>由于 Swift 与 Objective-C 的兼容性，你可以在项目中同时使用两种语言，开发基于混合语言的应用程序。利用这种特性，你可以用 Swift 的最新语言特性实现应用程序的部分功能，并无缝并入现有的 Objective-C 代码中。</p><p><a name="mix_and_match_overview"></a></p><h2 id="混搭概述" tabindex="-1">混搭概述 <a class="header-anchor" href="#混搭概述" aria-label="Permalink to &quot;混搭概述&quot;">​</a></h2><p>Objective-C 和 Swift 文件可以在项目中并存，无论这个项目原本是基于 Objective-C 还是 Swift。还可以直接往现有项目中添加另一种语言的源文件。这种自然的工作流程使得创建基于混合语言的应用程序或框架变得和单独使用一种语言一样简单。</p><p>基于混合语言编写应用程序或框架的过程还是有些区别的。下图展示了同时使用两种语言时，在同一 target 中导入代码的基本原理，后续小节会介绍更多细节。</p><p><img src="'+n+'" alt=""></p><p><a name="importing_code_from_within_the_same_app_target"></a></p><h2 id="在应用程序-target-中导入代码" tabindex="-1">在应用程序 target 中导入代码 <a class="header-anchor" href="#在应用程序-target-中导入代码" aria-label="Permalink to &quot;在应用程序 target 中导入代码&quot;">​</a></h2><p>在编写基于混合语言的应用程序时，可能需要在 Swift 代码中使用 Objective-C 代码，或者反过来。下面描述的流程适用于非框架类型的 target 。</p><p><a name="importing_objective_c_into_swift"></a></p><h3 id="将-objective-c-代码导入到-swift" tabindex="-1">将 Objective-C 代码导入到 Swift <a class="header-anchor" href="#将-objective-c-代码导入到-swift" aria-label="Permalink to &quot;将 Objective-C 代码导入到 Swift&quot;">​</a></h3><p>在应用程序 target 中导入一系列 Objective-C 文件供 Swift 代码使用时，需要依靠 Objective-C 桥接头文件将这些文件暴露给 Swift。添加 Swift 文件到现有的 Objective-C 项目时（或者反过来），Xcode 会自动创建 Objective-C 桥接头文件。</p><p><img src="'+l+`" alt=""></p><p>如果选择创建，Xcode 会随着源文件的创建生成 Objective-C 桥接头文件，并用产品模块名拼接上<code>&quot;-Bridging-Header.h&quot;</code>作为 Objective-C 桥接头文件的文件名。关于产品模块名的具体介绍，请参阅<a href="#naming_your_product_module">为产品模块命名</a>小节。</p><p>或者，可以选择<code>File &gt; New &gt; File &gt; （iOS，watchOS，tvOS，macOS） &gt; Source &gt; Header File</code>来手动创建 Objective-C 桥接头文件。</p><p>你可以编辑这个 Objective-C 桥接头文件将 Objective-C API 暴露给 Swift。</p><h5 id="在-target-中将-objective-c-代码导入到-swift" tabindex="-1">在 target 中将 Objective-C 代码导入到 Swift <a class="header-anchor" href="#在-target-中将-objective-c-代码导入到-swift" aria-label="Permalink to &quot;在 target 中将 Objective-C 代码导入到 Swift&quot;">​</a></h5><ol><li><p>在 Objective-C 桥接头文件中，导入希望暴露给 Swift 的 Objective-C 头文件。例如：</p><div class="language-objective-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">objective-c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;XYZCustomCell.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;XYZCustomView.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;XYZCustomViewController.h&quot;</span></span></code></pre></div></li><li><p>确保在<code>Build Settings &gt; Swfit Compiler - Code Generation &gt; Objective-C Bridging Header</code>中设置了 Objective-C 桥接头文件的路径。该路径相对于项目，类似<code>Info.plist</code>在<code>Build Settings</code>中指定的路径。Xcode 自动生成 Objective-C 桥接头文件时会自动设置该路径，因此大多数情况下你不需要专门去设置它。</p></li></ol><p>在 Objective-C 桥接头文件中导入的所有 Objective-C 头文件都会暴露给 Swift。target 中所有 Swift 文件都可以使用这些 Objective-C 头文件中的内容，不需要任何导入语句。不但如此，你还能用 Swift 语法使用这些自定义的 Objective-C 代码，就像使用系统的 Swift 类一样。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myCell </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> XYZCustomCell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myCell.subtitle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;A custom cell&quot;</span></span></code></pre></div><p><a name="importing_swift_into_objective_c"></a></p><h3 id="将-swift-代码导入到-objective-c" tabindex="-1">将 Swift 代码导入到 Objective-C <a class="header-anchor" href="#将-swift-代码导入到-objective-c" aria-label="Permalink to &quot;将 Swift 代码导入到 Objective-C&quot;">​</a></h3><p>将 Swift 代码导入到 Objective-C 时，需要依靠 Xcode 自动生成的头文件将这些 Swift 文件暴露给 Objective-C（此头文件不是上小节描述的 Objective-C 桥接头文件，该头文件在项目目录下不可见，但是可以跳转进去查看）。这个自动生成的头文件是一个 Objective-C 头文件，声明了 target 中的一些 Swift 接口。可以将这个 Objective-C 头文件看作 Swift 代码的保护伞头文件。该头文件以产品模块名拼接上<code>&quot;-Swift.h&quot;</code>来命名。关于产品模块名的具体介绍，请参阅<a href="#naming_your_product_module">为产品模块命名</a>小节。</p><p>默认情况下，这个头文件包含所有标记<code>public</code>或<code>open</code>修饰符的 Swift 声明。如果 target 中有 Objective-C 桥接头文件的话，它还会包含标记<code>internal</code>修饰符的 Swift 声明。标记<code>private</code>或<code>fileprivate</code>修饰符的 Swift 声明不会出现在这个头文件中。私有声明不会暴露给 Objective-C，除非它们被标记<code>@IBAction</code>，<code>@IBOutlet</code>，<code>@objc</code>。如果应用程序的 target 启用了单元测试，在单元测试的 target 中导入应用程序的 target 时，在<code>import</code>语句前加上<code>@testable</code>特性，就可以在单元测试的 target 中访问应用程序的 target 中任何标记<code>internal</code>修饰符的声明，犹如它们标记了<code>public</code>修饰符一般。</p><p>关于访问级别修饰符的更多信息，请参阅 <a href="http://wiki.jikexueyuan.com/project/swift/" target="_blank" rel="noreferrer"><em>The Swift Programming Language 中文版</em></a> 中的<a href="http://wiki.jikexueyuan.com/project/swift/chapter2/24_Access_Control.html" target="_blank" rel="noreferrer">访问控制</a>章节。</p><p>这个头文件会由 Xcode 自动生成，可直接导入到 Objective-C 代码中使用。注意，如果这个头文件中的 Swift 接口使用了自定义的 Objective-C 类型，在导入这个自动生成的头文件前，必须先将相关的自定义 Objective-C 类型对应的 Objective-C 头文件导入。</p><h5 id="在-target-中将-swift-代码导入到-objective-c" tabindex="-1">在 target 中将 Swift 代码导入到 Objective-C <a class="header-anchor" href="#在-target-中将-swift-代码导入到-objective-c" aria-label="Permalink to &quot;在 target 中将 Swift 代码导入到 Objective-C&quot;">​</a></h5><ul><li>在 target 中的 Objective-C <code>.m</code>文件中，用如下语法导入 Swift 代码：</li></ul><div class="language-objective-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">objective-c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ProductModuleName-Swift.h&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 将 ProductModuleName 替换为产品模块名</span></span></code></pre></div><p>target 中的一些 Swift 声明会暴露给包含这个导入语句的 Objective-C <code>.m</code>文件。关于如何在 Objective-C 中使用 Swift，请参阅<a href="#using_swift_from_objective-c">在 Objective-C 中使用 Swift</a>小节。</p><table tabindex="0"><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">导入到 Swift</th><th style="text-align:center;">导入到 Objective-C</th></tr></thead><tbody><tr><td style="text-align:center;">Swift 代码</td><td style="text-align:center;">不需要导入语句</td><td style="text-align:center;">#import &quot;ProductModuleName-Swift.h&quot;</td></tr><tr><td style="text-align:center;">Objective-C 代码</td><td style="text-align:center;">不需要导入语句；需要 Objective-C 桥接头文件</td><td style="text-align:center;">#import &quot;Header.h&quot;</td></tr></tbody></table><p><a name="importing_code_from_within_the_same_framework_target"></a></p><h2 id="在框架-target-中导入代码" tabindex="-1">在框架 target 中导入代码 <a class="header-anchor" href="#在框架-target-中导入代码" aria-label="Permalink to &quot;在框架 target 中导入代码&quot;">​</a></h2><p>在编写基于混合语言的框架时，往往需要在 Swift 代码中访问 Objective-C 代码，或者反过来。</p><p><a name="importing_objective_c_into_swift_2"></a></p><h3 id="将-objective-c-代码导入到-swift-1" tabindex="-1">将 Objective-C 代码导入到 Swift <a class="header-anchor" href="#将-objective-c-代码导入到-swift-1" aria-label="Permalink to &quot;将 Objective-C 代码导入到 Swift&quot;">​</a></h3><p>若要将 Objective-C 文件导入到 target 中的 Swift 代码中，需要将这些 Objective-C 文件导入到 Objective-C 的保护伞头文件中。</p><blockquote><p>译者注<br> 此处的“保护伞头文件”指的是带有框架版本号和版本字符串声明的那个头文件。</p></blockquote><h5 id="在-target-中将-objective-c-代码导入到-swift-1" tabindex="-1">在 target 中将 Objective-C 代码导入到 Swift <a class="header-anchor" href="#在-target-中将-objective-c-代码导入到-swift-1" aria-label="Permalink to &quot;在 target 中将 Objective-C 代码导入到 Swift&quot;">​</a></h5><ol><li><p>确保将 target 的<code>Build Settings &gt; Packaging &gt; Defines Module</code>设置为<code>Yes</code>。</p></li><li><p>在保护伞头文件中导入希望暴露给 Swift 的 Objective-C 头文件。例如：</p></li></ol><div class="language-objective-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">objective-c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;XYZ/XYZCustomCell.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;XYZ/XYZCustomView.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;XYZ/XYZCustomViewController.h&gt;</span></span></code></pre></div><p>保护伞头文件中导入的 Objective-C 头文件都会暴露给 Swift。target 中所有 Swift 文件都可以使用这些 Objective-C 头文件中的内容，不需要任何导入语句。不但如此，你还能用 Swift 语法使用这些自定义的 Objective-C 代码，就像使用系统的 Swift 类一样。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myOtherCell </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> XYZCustomCell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myOtherCell.subtitle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Another custom cell&quot;</span></span></code></pre></div><p><a name="importing_swift_into_objective_c_2"></a></p><h3 id="将-swift-代码导入到-objective-c-1" tabindex="-1">将 Swift 代码导入到 Objective-C <a class="header-anchor" href="#将-swift-代码导入到-objective-c-1" aria-label="Permalink to &quot;将 Swift 代码导入到 Objective-C&quot;">​</a></h3><p>若要将 Swift 文件导入到 target 中的 Objective-C 代码中，不需要导入任何东西到保护伞头文件，只需将 Xcode 为 Swift 代码自动生成的头文件导入到要使用 Swift 代码的 Objective-C <code>.m</code>文件。</p><p>由于这个自动生成的头文件是框架公共接口的一部分，因此只有标记<code>public</code>或<code>open</code>修饰符的 Swift 声明才会出现在这个自动生成的头文件中。</p><p>对于继承自 Objective-C 类的 Swift 子类中标记<code>internal</code>修饰符的方法和属性，它们只会暴露给 Objective-C 运行时系统，这意味着它们不会出现在 Swift 代码的头文件中，也无法在编译期访问它们。</p><blockquote><p>译者注<br> 使用这些标记<code>internal</code>的 Swift 声明时，编译器会报错提示符号未定义，研究了一下发现可以采取如下方式解决：</p></blockquote><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Swift 代码部分</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@objc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NSObject </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote></blockquote><div class="language-objective-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">objective-c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Objective-C 代码部分</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 为了解决符号未定义的错误，手动写个接口声明，注意 Swift 代码中的 @objc(Foo)，否则会导致类名不匹配</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NSObject</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@end</span></span></code></pre></div><p>关于访问级别修饰符的更多信息，请参阅 <a href="http://wiki.jikexueyuan.com/project/swift/" target="_blank" rel="noreferrer"><em>The Swift Programming Language 中文版</em></a> 中的<a href="http://wiki.jikexueyuan.com/project/swift/chapter2/24_Access_Control.html" target="_blank" rel="noreferrer">访问控制</a>章节。</p><h5 id="在-target-中将-swift-代码导入到-objective-c-1" tabindex="-1">在 target 中将 Swift 代码导入到 Objective-C <a class="header-anchor" href="#在-target-中将-swift-代码导入到-objective-c-1" aria-label="Permalink to &quot;在 target 中将 Swift 代码导入到 Objective-C&quot;">​</a></h5><ol><li><p>确保将 target 的<code>Build Settings &gt; Packaging &gt; Defines Module</code>设置为<code>Yes</code>。</p></li><li><p>使用如下语法将 Swift 代码导入到 target 中的 Objective-C <code>.m</code>文件：</p></li></ol><div class="language-objective-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">objective-c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 分别用产品名和产品模块名替换 ProductName 和 ProductModuleName</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;ProductName/ProductModuleName-Swift.h&gt;</span></span></code></pre></div><p>target 中的一些 Swift 声明会暴露给包含这个导入语句的 Objective-C <code>.m</code>文件。关于如何在 Objective-C 中使用 Swift，请参阅<a href="#using_swift_from_objective-c">在 Objective-C 中使用 Swift</a>小节。</p><table tabindex="0"><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">导入到 Swift</th><th style="text-align:center;">导入到 Objective-C</th></tr></thead><tbody><tr><td style="text-align:center;">Swift 代码</td><td style="text-align:center;">不需要导入语句</td><td style="text-align:center;">#import &lt;ProductName/ProductModuleName-Swift.h&gt;</td></tr><tr><td style="text-align:center;">Objective-C 代码</td><td style="text-align:center;">不需要导入语句；需要 Objective-C 保护伞头文件</td><td style="text-align:center;">#import &quot;Header.h&quot;</td></tr></tbody></table><p><a name="importing_external_frameworks"></a></p><h2 id="导入外部框架" tabindex="-1">导入外部框架 <a class="header-anchor" href="#导入外部框架" aria-label="Permalink to &quot;导入外部框架&quot;">​</a></h2><p>你可以导入位于其他 target 中的外部框架，无论它是基于 Objective-C，Swift，还是基于混合语言的。导入流程都是一样的，只需确保被导入框架的<code>Build Setting &gt; Pakaging &gt; Defines Module</code>设置为<code>Yes</code>。</p><p>使用如下语法将外部框架导入到 Swift 文件：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FrameworkName</span></span></code></pre></div><p>使用如下语法将外部框架导入到 Objective-C <code>.m</code>文件：</p><div class="language-objective-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">objective-c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@import FrameworkName;</span></span></code></pre></div><table tabindex="0"><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">导入到 Swift</th><th style="text-align:center;">导入到 Objective-C</th></tr></thead><tbody><tr><td style="text-align:center;">任意语言框架</td><td style="text-align:center;">import FrameworkName</td><td style="text-align:center;">@import FrameworkName;</td></tr></tbody></table><p><a name="using_swift_from_objective-c"></a></p><h2 id="在-objective-c-中使用-swift" tabindex="-1">在 Objective-C 中使用 Swift <a class="header-anchor" href="#在-objective-c-中使用-swift" aria-label="Permalink to &quot;在 Objective-C 中使用 Swift&quot;">​</a></h2><p>将 Swift 代码导入到 Objective-C 后，就可用标准 Objective-C 语法使用 Swift 类。</p><div class="language-objective-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">objective-c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MySwiftClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">swiftObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[MySwiftClass </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[swiftObject </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">swiftMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre></div><p>只有继承自 Objective-C 类的 Swift 类才能在 Objective-C 中使用。想要了解 Swift 如何将接口导入到 Objective-C 以及在 Objective-C 中能使用哪些 Swift 特性，请参阅<a href="./../02-Interoperability/01-Interacting with Objective-C APIs.html#swift_type_compatibility">Swift 类型兼容性</a>小节。</p><p><a name="referencing_a_swift_class_or_protocol_in_an_objective_c_header"></a></p><h3 id="在-objective-c-头文件中引用-swift-类或协议" tabindex="-1">在 Objective-C 头文件中引用 Swift 类或协议 <a class="header-anchor" href="#在-objective-c-头文件中引用-swift-类或协议" aria-label="Permalink to &quot;在 Objective-C 头文件中引用 Swift 类或协议&quot;">​</a></h3><p>为避免循环引用，不要将 Swift 代码导入到 Objective-C 头文件（<code>.h</code>文件），而应该使用前向声明来引用一个 Swift 类或者协议。</p><div class="language-objective-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">objective-c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MyObjcClass.h</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MySwiftClass;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@protocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MySwiftProtocol;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyObjcClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NSObject</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- (MySwiftClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">returnSwiftClassInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;MySwiftProtocol&gt;)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">returnInstanceAdoptingSwiftProtocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@end</span></span></code></pre></div><p>Swift 类和协议的前向声明只能用于声明方法和属性。</p><p><a name="declaring_a_swift_protocol_that_can_be_adopted_by_an_objective_c_class"></a></p><h3 id="声明可被-objective-c-类遵守的-swift-协议" tabindex="-1">声明可被 Objective-C 类遵守的 Swift 协议 <a class="header-anchor" href="#声明可被-objective-c-类遵守的-swift-协议" aria-label="Permalink to &quot;声明可被 Objective-C 类遵守的 Swift 协议&quot;">​</a></h3><p>将 Swift 协议标记<code>@objc</code>特性，从而让 Objective-C 类可以遵守该协议。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@objc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> protocol</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MySwiftProtocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requiredMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @objc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> optional</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> optionalMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>为了遵守协议，Objective-C 类必须实现协议中声明的所有构造器，属性，下标，方法。可选的协议要求必须标记<code>@objc</code>特性和<code>optional</code>修饰符。</p><p><a name="adopting_a_swift_protocol_in_an_objective_c_implementation"></a></p><h3 id="在-objective-c-的实现文件中采用-swift-协议" tabindex="-1">在 Objective-C 的实现文件中采用 Swift 协议 <a class="header-anchor" href="#在-objective-c-的实现文件中采用-swift-协议" aria-label="Permalink to &quot;在 Objective-C 的实现文件中采用 Swift 协议&quot;">​</a></h3><p>Objective-C 类可以在实现文件（<code>.m</code>文件）中导入 Xcode 自动生成的 Swift 头文件，然后使用类扩展来采用 Swift 协议。</p><div class="language-objective-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">objective-c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MyObjcClass.m</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ProductModuleName-Swift.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyObjcClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () &lt;MySwiftProtocol&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@implementation</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyObjcClass</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@end</span></span></code></pre></div><p><a name="declaring_a_swift_error_type_that_can_be_used_from_objective_c"></a></p><h3 id="声明可在-objective-c-中使用的-swift-错误类型" tabindex="-1">声明可在 Objective-C 中使用的 Swift 错误类型 <a class="header-anchor" href="#声明可在-objective-c-中使用的-swift-错误类型" aria-label="Permalink to &quot;声明可在 Objective-C 中使用的 Swift 错误类型&quot;">​</a></h3><p>遵守<code>Error</code>协议并标记<code>@objc</code>特性的 Swift 枚举会在 Swift 头文件中生成一个<code>NS_ENUM</code>枚举声明，并会为错误域生成相应的<code>NSString</code>字符串常量。例如，有如下 Swift 枚举声明：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@objc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">c</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Swift 头文件中相应的 Objective-C 声明如下所示：</p><div class="language-objective-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">objective-c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Project-Swift.h</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SWIFT_ENUM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NSInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, CustomError) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    CustomErrorA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    CustomErrorB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    CustomErrorC </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NSString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CustomErrorDomain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @&quot;Project.CustomError&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><a name="overriding_swift_names_for_objective_c_interfaces"></a></p><h2 id="为-objective-c-接口提供-swift-命名" tabindex="-1">为 Objective-C 接口提供 Swift 命名 <a class="header-anchor" href="#为-objective-c-接口提供-swift-命名" aria-label="Permalink to &quot;为 Objective-C 接口提供 Swift 命名&quot;">​</a></h2><p>Swift 编译器自动将 Objective-C 代码作为常规 Swift 代码导入，它将 Objective-C 类工厂方法导入为 Swift 构造器，还会缩短 Objective-C 枚举值的命名。</p><p>代码中也许会存在无法自动处理的特殊情况。对于 Objective-C 方法，枚举值，或者选项集的值，可以使用<code>NS_SWIFT_NAME</code>宏来自定义它们导入到 Swift 后的命名。</p><p><a name="class_factory_methods"></a></p><h3 id="类工厂方法" tabindex="-1">类工厂方法 <a class="header-anchor" href="#类工厂方法" aria-label="Permalink to &quot;类工厂方法&quot;">​</a></h3><p>如果 Swift 编译器无法识别类工厂方法，可以使用<code>NS_SWIFT_NAME</code>宏来指定类工厂方法导入为 Swift 构造器后的方法名，从而能够将其正确导入。例如：</p><div class="language-objective-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">objective-c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instancetype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)recordWithRPM:(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NSUInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)RPM </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NS_SWIFT_NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RPM:));</span></span></code></pre></div><p>如果 Swift 编译器错误地将一个普通的类方法识别为类工厂方法，可以使用<code>NS_SWIFT_NAME</code>宏来指定类方法导入为 Swift 类方法后的方法名，从而能够将其正确导入。例如：</p><div class="language-objective-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">objective-c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)recordWithQuality:(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)quality </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NS_SWIFT_NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(quality:));</span></span></code></pre></div><p><a name="enumerations"></a></p><h3 id="枚举" tabindex="-1">枚举 <a class="header-anchor" href="#枚举" aria-label="Permalink to &quot;枚举&quot;">​</a></h3><p>默认情况下，Swift 导入枚举时，会将枚举值的名称前缀截断。如果需要自定义枚举值的名称，可以使用<code>NS_SWIFT_NAME</code>宏来指定枚举值导入到 Swift 后的命名。例如：</p><div class="language-objective-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">objective-c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NS_ENUM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NSInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ABCRecordSide) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ABCRecordSideA,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ABCRecordSideB </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NS_SWIFT_NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(FlipSide),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p><a name="making_objective_c_interfaces_unavailable_in_swift"></a></p><h2 id="让-objective-c-接口在-swift-中不可用" tabindex="-1">让 Objective-C 接口在 Swift 中不可用 <a class="header-anchor" href="#让-objective-c-接口在-swift-中不可用" aria-label="Permalink to &quot;让 Objective-C 接口在 Swift 中不可用&quot;">​</a></h2><p>一些 Objective-C 接口可能不适合或者没必要暴露给 Swift，为了防止 Objective-C 接口导入到 Swift，可以使用<code>NS_SWIFT_UNAVAILABLE</code>宏来传达一个提示信息，从而指引 API 使用者使用其他替代方式。</p><p>例如，一个 Objective-C 类提供了一个接收一些键值对作为可变参数的便利构造器，可以建议 Swift 用户使用字典字面量作为替代：</p><div class="language-objective-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">objective-c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instancetype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)collectionWithValues:(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NSArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)values </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                             forKeys:(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NSArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NSCopying</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)keys </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NS_SWIFT_UNAVAILABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;使用字典字面量替代&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>试图在 Swift 中调用<code>+collectionWithValues:forKeys:</code>方法将导致编译错误。</p><p><a name="refining_objective_c_declarations"></a></p><h2 id="优化-objective-c-声明" tabindex="-1">优化 Objective-C 声明 <a class="header-anchor" href="#优化-objective-c-声明" aria-label="Permalink to &quot;优化 Objective-C 声明&quot;">​</a></h2><p>可以使用<code>NS_REFINED_FOR_SWIFT</code>宏标记 Objective-C 方法的声明，然后在 Swift 中通过扩展提供一个优雅的 Swift 接口，通过该接口去调用方法的原始实现。例如，接收一个或者多个指针参数的 Objective-C 方法可以优化为一个返回元组值的 Swift 方法。使用该宏标记的方法导入到 Swift 后会做如下处理：</p><ul><li>对于初始化方法，在第一个外部参数名前加双下划线（<code>__</code>）。</li><li>对于对象下标方法，只要设值或取值方法被标记<code>NS_REFINED_FOR_SWIFT</code>宏，这对下标方法就会变为 Swift 中的普通方法。被标记宏的下标方法会在方法名前加双下划线（<code>__</code>）。</li><li>对于其他方法，在方法名前加双下划线（<code>__</code>）。</li></ul><p>思考如下 Objective-C 声明：</p><div class="language-objective-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">objective-c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NSObject</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRed:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">nullable</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CGFloat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)red</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         green:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">nullable</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CGFloat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)green</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          blue:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">nullable</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CGFloat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)blue</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         alpha:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">nullable</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CGFloat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)alpha NS_REFINED_FOR_SWIFT;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@end</span></span></code></pre></div><p>可以通过 Swift 扩展来提供一个优化后的接口：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extension</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RGBA: (red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r: CGFloat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g: CGFloat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b: CGFloat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: CGFloat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        __getRed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">green</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">blue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">alpha</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: r, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">green</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: g, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">blue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: b, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">alpha</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: a)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a name="adding_availability_information_to_objective_c_apis"></a></p><h2 id="将可用性信息添加到-objective-c-api" tabindex="-1">将可用性信息添加到 Objective-C API <a class="header-anchor" href="#将可用性信息添加到-objective-c-api" aria-label="Permalink to &quot;将可用性信息添加到 Objective-C API&quot;">​</a></h2><p>在 Swift 中为特定平台编译应用时，你可以使用 <code>@available</code> 特性来控制一个声明是否可用。同样，你可以使用可用性条件 <code>#available</code> 根据所需平台和版本有条件地执行代码。</p><p>两种可用性说明符在 Objective-C 中都有提供，使用以下示例中展示的相应语法即可。</p><p>如下示例展示了如何为 Swift 声明添加可用性信息：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@available</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">iOS</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">macOS</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10.13</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> newMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用 iOS 11 API</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如下示例展示了如何在 Objective-C 中添加相同的可用性信息：</p><div class="language-objective-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">objective-c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIViewController</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> API_AVAILABLE(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ios</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">macosx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.13</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@end</span></span></code></pre></div><p>如下示例展示了如何在 Swift 条件语句中使用可用性信息：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> #available</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">iOS</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用 iOS 11 API</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 早期版本的 iOS 的替代代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如下示例展示了如何在 Objective-C 中使用相同的可用性信息：</p><div class="language-objective-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">objective-c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">available</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(iOS </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用 iOS 11 API</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 早期版本的 iOS 的替代代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>关于指定平台可用性的更多信息，请参阅 <a href="http://wiki.jikexueyuan.com/project/swift" target="_blank" rel="noreferrer"><em>The Swift Programming Language 中文版</em></a> 中的<a href="http://wiki.jikexueyuan.com/project/swift/chapter3/06_Attributes.html#declaration_attributes" target="_blank" rel="noreferrer">声明特性</a>部分。</p><p><a name="naming_your_product_module"></a></p><h2 id="为产品模块命名" tabindex="-1">为产品模块命名 <a class="header-anchor" href="#为产品模块命名" aria-label="Permalink to &quot;为产品模块命名&quot;">​</a></h2><p>无论是 Xcode 为 Swift 代码自动生成的头文件，还是 Objective-C 桥接头文件，都会根据产品模块名来命名。默认情况下，产品模块名和产品名一样。然而，如果产品名包含特殊字符（只能是字母、数字、下划线），例如点号（<code>.</code>），作为产品模块名时，这些特殊字符会被下划线（<code>_</code>）替换。如果产品名以数字开头，作为产品模块名时，第一个数字也会被下划线替换。</p><p>也可以为产品模块名提供一个自定义的名称，Xcode 会根据这个名称来命名桥接头文件和自动生成的头文件，只需修改<code>Build setting &gt; Packaging &gt; Product Module Name</code>中的名称即可。</p><blockquote><p>注意<br> 无法改变框架的产品模块名。</p></blockquote><p><a name="troubleshooting_tips_and_reminders"></a></p><h2 id="故障排除贴士" tabindex="-1">故障排除贴士 <a class="header-anchor" href="#故障排除贴士" aria-label="Permalink to &quot;故障排除贴士&quot;">​</a></h2><ul><li><p>将 Swift 和 Objective-C 文件看作同一代码集，注意命名冲突。</p></li><li><p>如果使用框架，确保框架的<code>Build setting &gt; Packaging &gt; Defines Module</code>（<code>DEFINES_MODULE</code>）设置为<code>Yes</code>。</p></li><li><p>如果使用 Objective-C 桥接头文件，确保<code>Build setting &gt; Swift Compiler &gt; Code Generation</code>（<code>SWIFT_OBJC_BRIDGING_HEADER</code>）中的头文件路径是头文件自身相对于项目的路径，例如<code>MyApp/MyApp-Bridging-Header.h</code>。</p></li><li><p>Xcode 会根据产品模块名（<code>PRODUCT_MODULE_NAME</code>），而不是 target 的名称（<code>TARGET_NAME</code>）来命名 Objective-C 桥接头文件以及为 Swift 代码自动生成的头文件。详情请参阅<a href="#naming_your_product_module">为产品模块命名</a>小节。</p></li><li><p>只有继承自 Objective-C 类的 Swift 类，以及标记了<code>@objc</code>（包括各种被隐式标记的情况）的 Swift 声明，才能在 Objective-C 中使用。</p></li><li><p>将 Swift 代码导入到 Objective-C 时，注意 Objective-C 无法转化 Swift 的独有特性。详情请参阅<a href="#using_swift_from_objective-c">在 Objective-C 中使用 Swift</a>小节。</p></li><li><p>如果在 Swift 代码中使用了自定义的 Objective-C 类型，在 Objective-C 中使用这部分 Swift 代码时，确保先导入相关的 Objective-C 类型的头文件，然后再将 Xcode 为 Swift 代码自动生成的头文件导入。</p></li><li><p>标记<code>private</code>或<code>fileprivate</code>修饰符的 Swift 声明不会出现在自动生成的头文件中，因为私有声明不会暴露给 Objective-C，除非它们被标记<code>@IBAction</code>，<code>@IBOutlet</code>或者<code>@objc</code>。</p></li><li><p>对于应用程序的 target，当存在 Objective-C 桥接头文件时，标记<code>internal</code>修饰符的 Swift 声明也会出现在自动生成的头文件中。</p></li><li><p>对于框架的 target，只有标记<code>public</code>或<code>open</code>修饰符的声明才会出现在自动生成的头文件中，不过依然可以在框架内部的 Objective-C 代码中使用标记<code>internal</code>修饰符的 Swift API，只要它们所属的类继承自 Objective-C 类。关于访问级别修饰符的更多信息，请参阅 <a href="http://wiki.jikexueyuan.com/project/swift/" target="_blank" rel="noreferrer"><em>The Swift Programming Language 中文版</em></a> 中的<a href="http://wiki.jikexueyuan.com/project/swift/chapter2/24_Access_Control.html" target="_blank" rel="noreferrer">访问控制</a>章节。</p></li></ul>`,142)]))}const b=s(h,[["render",p]]);export{E as __pageData,b as default};
