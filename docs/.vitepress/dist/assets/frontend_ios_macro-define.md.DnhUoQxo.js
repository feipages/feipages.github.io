import{_ as n,c as s,o as e,ag as i}from"./chunks/framework.BHpayLOB.js";const u=JSON.parse('{"title":"Macro Define","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/ios/macro-define.md","filePath":"frontend/ios/macro-define.md"}'),p={name:"frontend/ios/macro-define.md"};function o(t,a,l,r,c,d){return e(),s("div",null,a[0]||(a[0]=[i(`<h1 id="macro-define" tabindex="-1">Macro Define <a class="header-anchor" href="#macro-define" aria-label="Permalink to &quot;Macro Define&quot;">​</a></h1><blockquote><p>常用的宏定义</p></blockquote><h1 id="_1-debug-log" tabindex="-1">1. DEBUG Log <a class="header-anchor" href="#_1-debug-log" aria-label="Permalink to &quot;1. DEBUG Log&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#ifdef DEBUG</span></span>
<span class="line"><span>#define LLog(fmt, ...) NSLog((@&quot;%s [Line %d] &quot; fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);</span></span>
<span class="line"><span>#else</span></span>
<span class="line"><span>#define LLog(fmt, ...) while(0){}</span></span>
<span class="line"><span>#endif</span></span></code></pre></div><p>ios开发中难免会遇到一些oc与c混编的时候，当使用了pch文件时，c文件是不会识别上面的条件编译和#import等指令的，这时候应该使用另外一个条件编译来避免出现问题：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#ifdef __OBJC__</span></span>
<span class="line"><span>    #import &lt;UIKit/UIKit.h&gt;</span></span>
<span class="line"><span>    #import &lt;Foundation/Foundation.h&gt;</span></span>
<span class="line"><span>#endif</span></span></code></pre></div><h1 id="_2-ios版本兼容" tabindex="-1">2. ios版本兼容 <a class="header-anchor" href="#_2-ios版本兼容" aria-label="Permalink to &quot;2. ios版本兼容&quot;">​</a></h1><h2 id="编译设置" tabindex="-1">编译设置 <a class="header-anchor" href="#编译设置" aria-label="Permalink to &quot;编译设置&quot;">​</a></h2><p>Base SDK 当前编译所使用的SDK版本 Deployment Target 运行APP所需要的最低的操作系统版本 Base SDK 可以设置为Xcode默认的设置,比如Latest iOS(iOS10.2），Deployment Target设置为iOS 8.0，目前大多数APP都支持到该版本</p><h2 id="ios宏定义" tabindex="-1">iOS宏定义 <a class="header-anchor" href="#ios宏定义" aria-label="Permalink to &quot;iOS宏定义&quot;">​</a></h2><h3 id="静态检查" tabindex="-1">静态检查 <a class="header-anchor" href="#静态检查" aria-label="Permalink to &quot;静态检查&quot;">​</a></h3><p>在编译阶段就检查当前SDK编译与构建应用是否能使用某个API 编译常量 __IPHONE_OS_VERSION_MIN_REQUIRED 系统最低版本（也就是iOS Deployment Target选择的版本） __IPHONE_OS_VERSION_MAX_ALLOWED 系统最高版本（当前手机系统允许使用的SDK的最高版本）</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#if __IPHONE_OS_VERSION_MAX_ALLOWED &gt;= __IPHONE_9_0</span></span>
<span class="line"><span>    // 系统版本在iOS9.0及以上则编译此部分代码</span></span>
<span class="line"><span>#else</span></span>
<span class="line"><span>    // 如果低于iOS9.0则编译此部分代码</span></span>
<span class="line"><span>#endif</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#if __IPHONE_OS_VERSION_MIN_REQUIRED &gt;= __IPHONE_8_0</span></span>
<span class="line"><span>// 如果选择(iOS Deployment Target)的最低支持版本在iOS8.0及以上才可以使用</span></span>
<span class="line"><span>#endif</span></span></code></pre></div><h3 id="动态检查" tabindex="-1">动态检查 <a class="header-anchor" href="#动态检查" aria-label="Permalink to &quot;动态检查&quot;">​</a></h3><h4 id="corefoudation-nsfoundation版本宏" tabindex="-1">CoreFoudation/NSFoundation版本宏 <a class="header-anchor" href="#corefoudation-nsfoundation版本宏" aria-label="Permalink to &quot;CoreFoudation/NSFoundation版本宏&quot;">​</a></h4><p>定义的宏如下，可以看出某些系统版本的值是一样的，而且没有对ios 10.0以上版本进行定义，需要自己定义</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#define kCFCoreFoundationVersionNumber_iOS_8_0 1140.1</span></span>
<span class="line"><span>#define kCFCoreFoundationVersionNumber_iOS_8_1 1141.14</span></span>
<span class="line"><span>#define kCFCoreFoundationVersionNumber_iOS_8_2 1142.16</span></span>
<span class="line"><span>#define kCFCoreFoundationVersionNumber_iOS_8_3 1144.17</span></span>
<span class="line"><span>#define kCFCoreFoundationVersionNumber_iOS_8_4 1145.15</span></span>
<span class="line"><span>#define kCFCoreFoundationVersionNumber_iOS_8_x_Max 1199</span></span>
<span class="line"><span>#define kCFCoreFoundationVersionNumber_iOS_9_0 1240.1</span></span>
<span class="line"><span>#define kCFCoreFoundationVersionNumber_iOS_9_1 1241.11</span></span>
<span class="line"><span>#define kCFCoreFoundationVersionNumber_iOS_9_2 1242.13</span></span>
<span class="line"><span>#define kCFCoreFoundationVersionNumber_iOS_9_3 1242.13</span></span>
<span class="line"><span>#define kCFCoreFoundationVersionNumber_iOS_9_4 1280.38</span></span>
<span class="line"><span>#define kCFCoreFoundationVersionNumber_iOS_9_x_Max 1299</span></span></code></pre></div><p>使用方式</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>if (kCFCoreFoundationVersionNumber &lt;kCFCoreFoundationVersionNumber_iOS_9_0) {</span></span>
<span class="line"><span>        //系统版本低于iOS9.0</span></span>
<span class="line"><span>    }</span></span></code></pre></div><p>综合而论，不推荐使用</p><h4 id="检查运行的ios系统版本" tabindex="-1">检查运行的iOS系统版本 <a class="header-anchor" href="#检查运行的ios系统版本" aria-label="Permalink to &quot;检查运行的iOS系统版本&quot;">​</a></h4><p>转换为基本数据类型比较</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>if ([[ [UIDevice currentDevice] systemVersion] floatValue] &gt;= 10.0) {</span></span>
<span class="line"><span>        </span></span>
<span class="line"><span>    }</span></span></code></pre></div><p>使用systemVersion方法获取到的值为8.1 ,如比较8.1.1和8.1.2，就很困难了</p><p>字符串比较</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#define SYSTEM_VERSION_EQUAL_TO(v)                  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedSame)</span></span>
<span class="line"><span>#define SYSTEM_VERSION_GREATER_THAN(v)              ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending)</span></span>
<span class="line"><span>#define SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(v)  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedAscending)</span></span>
<span class="line"><span>#define SYSTEM_VERSION_LESS_THAN(v)                 ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedAscending)</span></span>
<span class="line"><span>#define SYSTEM_VERSION_LESS_THAN_OR_EQUAL_TO(v)     ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedDescending)</span></span></code></pre></div><p>使用字符串的比较 存在的问题 比如8.1 相对于8.1.0 结果为NSOrderedAscending， 即8.1 &lt; 8.1.0</p><p>使用NSOperatingSystemVersion(iOS 8.0)</p><p>NSOperatingSystemVersion 为结构体,如下所示</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>typedef struct {</span></span>
<span class="line"><span>    NSInteger majorVersion;</span></span>
<span class="line"><span>    NSInteger minorVersion;</span></span>
<span class="line"><span>    NSInteger patchVersion;</span></span>
<span class="line"><span>} NSOperatingSystemVersion;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>NSOperatingSystemVersion version = (NSOperatingSystemVersion){8,2,0};</span></span>
<span class="line"><span>    if ([[NSProcessInfo processInfo] isOperatingSystemAtLeastVersion:version]) {</span></span>
<span class="line"><span>        // 高于该版本</span></span>
<span class="line"><span>    }else {</span></span>
<span class="line"><span>        // 低于该版本</span></span>
<span class="line"><span>    }</span></span></code></pre></div><p>date: 2017-04-22 16:00:00 author: &quot;Gao Fei&quot;</p>`,33)]))}const h=n(p,[["render",o]]);export{u as __pageData,h as default};
