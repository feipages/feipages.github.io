import{_ as n,c as t,o as a,ag as o}from"./chunks/framework.BHpayLOB.js";const u=JSON.parse('{"title":"\\"Url Coding\\"","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/ios/url-codeing.md","filePath":"frontend/ios/url-codeing.md"}'),s={name:"frontend/ios/url-codeing.md"};function p(r,e,i,c,l,d){return a(),t("div",null,e[0]||(e[0]=[o(`<h1 id="url-coding" tabindex="-1">&quot;Url Coding&quot; <a class="header-anchor" href="#url-coding" aria-label="Permalink to &quot;&quot;Url Coding&quot;&quot;">​</a></h1><blockquote><p>subtitle: &quot;与url相关的处理&quot;</p></blockquote><p>#Encoding and Decoding URL Data</p><p>To percent-encode part of a URL string, use the ==NSString== method ==stringByAddingPercentEncodingWithAllowedCharacters==:, passing the appropriate character set for the URL component or subcomponent: • User: ==URLUserAllowedCharacterSet== • Password: ==URLPasswordAllowedCharacterSet== • Host: ==URLHostAllowedCharacterSet== • Path: ==URLPathAllowedCharacterSet== • Fragment: ==URLFragmentAllowedCharacterSet== • Query: ==URLQueryAllowedCharacterSet==</p><p><code>Important: Don’t use stringByAddingPercentEncodingWithAllowedCharacters: to encode an entire URL string, because each URL component or subcomponent has different rules for what characters are valid.</code></p><p>For example, to percent-encode a UTF-8 string for inclusion in a URL path, you do the following:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  NSString *str = @&quot;http://192.168.2.123:80/u=142020185,2790987080&amp;fm=26&amp;gp=0的副本.jpg&quot;;</span></span>
<span class="line"><span>    NSString *urlStr = [str stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];</span></span>
<span class="line"><span>    [str stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet URLPathAllowedCharacterSet]];</span></span>
<span class="line"><span>    NSURL *url = [NSURL URLWithString:urlStr];</span></span></code></pre></div><p>If you want to decode a percent-encoded URL component, use NSURLComponents to split the URL into its constituent parts and access the corresponding property. For example, to get the UTF-8 string value for a percent-encoded URL path, you do the following:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>NSString *encodeStr = @&quot;http://192.168.2.123:80/u=142020185,2790987080&amp;fm=26&amp;gp=0%E7%9A%84%E5%89%AF%E6%9C%AC.jpg&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//   NSURL *url2 = [NSURL URLWithString:encodeStr];</span></span>
<span class="line"><span>//    NSURLComponents *component = [NSURLComponents componentsWithURL:url2 resolvingAgainstBaseURL:NO];</span></span>
<span class="line"><span>    NSURLComponents *component = [NSURLComponents componentsWithString:encodeStr];</span></span>
<span class="line"><span>    NSString *path = component.path;</span></span>
<span class="line"><span>    NSLog(@&quot;path=%@&quot;,path);</span></span></code></pre></div><p>The user component of a URL is an optional component that precedes the host component, and ends at either a colon (if a password is specified) or an @ sign (if no password is specified). For example, in the URL <a href="http://username:password@www.example.com/index.html#jumpLocation" target="_blank" rel="noreferrer">http://username:password@www.example.com/index.html#jumpLocation</a>, the user component is username the pass component is password the host component is www.example.com the path component is /index.html the fragment is jumpLocation</p><p>date: 2017-06-06 16:00:00 author: &quot;Gao Fei&quot;</p>`,11)]))}const g=n(s,[["render",p]]);export{u as __pageData,g as default};
