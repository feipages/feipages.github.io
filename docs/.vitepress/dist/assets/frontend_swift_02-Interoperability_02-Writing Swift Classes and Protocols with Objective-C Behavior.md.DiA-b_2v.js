import{_ as s,c as a,o as e,ag as t}from"./chunks/framework.BHpayLOB.js";const n="/assets/Attributes%20Inspector@2x.B2mpndFp.png",l="/assets/Identity%20Inspector@2x.CkbcHy2u.png",p="/assets/coredataeditor_2x.C-_TZgB_.png",h="/assets/coredatanamespace_2x.DT2Ua0ZZ.png",b=JSON.parse('{"title":"使用 Objective-C 特性编写 Swift 类和协议","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/swift/02-Interoperability/02-Writing Swift Classes and Protocols with Objective-C Behavior.md","filePath":"frontend/swift/02-Interoperability/02-Writing Swift Classes and Protocols with Objective-C Behavior.md"}'),r={name:"frontend/swift/02-Interoperability/02-Writing Swift Classes and Protocols with Objective-C Behavior.md"};function k(o,i,d,c,g,E){return e(),a("div",null,i[0]||(i[0]=[t(`<h1 id="使用-objective-c-特性编写-swift-类和协议" tabindex="-1">使用 Objective-C 特性编写 Swift 类和协议 <a class="header-anchor" href="#使用-objective-c-特性编写-swift-类和协议" aria-label="Permalink to &quot;使用 Objective-C 特性编写 Swift 类和协议&quot;">​</a></h1><ul><li><a href="#inheriting_from_objective-c_classes">继承 Objective-C 类</a><ul><li><a href="#NSCoding">NSCoding 协议</a></li></ul></li><li><a href="#adopting_protocols">采用协议</a></li><li><a href="#writing_initializers_and_deinitializers">编写构造器和析构器</a></li><li><a href="#using_swift_class_names_with_objective_c_apis">兼容使用 Swift 类名的 Objective-C API</a></li><li><a href="#integrating_with_interface_builder">与 Interface Builder 结合</a><ul><li><a href="#working_with_outlets_and_actions">使用 Outlets 和 Actions</a></li><li><a href="#live_rendering">实时渲染</a></li></ul></li><li><a href="#specifying_property_attributes">指定属性特性</a><ul><li><a href="#strong_and_weak">强引用和弱引用</a></li><li><a href="#read_write_and_read_only">读写和只读</a></li><li><a href="#copy_semantics">拷贝语义</a></li></ul></li><li><a href="#implementing_core_data_managed_object_subclasses">实现 Core Data 的 NSManagedObject 子类</a></li><li><a href="#declaring_protocols">声明协议</a></li></ul><p><strong>互用性</strong>让你在编写 Swift 代码时可以融合 Objective-C 语言特性。在编写 Swift 代码时，不仅可以继承 Objective-C 类，声明和采用 Objective-C 协议，还可以使用 Objective-C 的一些其它功能。这意味着不但可以基于 Objective-C 中耳熟能详的既有特性来编写 Swift 代码，还可以利用 Swift 更为强大的现代化语言特性来改善代码。</p><p><a name="inheriting_from_objective-c_classes"></a></p><h2 id="继承-objective-c-类" tabindex="-1">继承 Objective-C 类 <a class="header-anchor" href="#继承-objective-c-类" aria-label="Permalink to &quot;继承 Objective-C 类&quot;">​</a></h2><p>在 Swift，可以定义一个继承自 Objective-C 类的 Swift 子类。在 Swift 的类名后面加上一个冒号（<code>:</code>），冒号后面跟上 Objective-C 类的类名即可。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UIKit</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MySwiftViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIViewController </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 定义类</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Swift 子类可以从 Objective-C 父类中继承所有的功能。</p><p>如果要覆盖父类中的实现，可以使用 <code>override</code> 修饰符。编译器会根据 Swift 方法名来自动推断被重写的父类方法。也可以使用 <code>@objc(name)</code> 特性来明确指定相对应的 Objective-C 符号。</p><p>当 Swift 类引入了许多需要 Objective-C 运行时行为的新方法或属性时，请在该类的声明中使用 <code>@objcMembers</code> 特性。对类使用 <code>@objcMembers</code> 特性会隐式地将 <code>@objc</code> 特性添加到类中所有兼容 Objective-C 的成员。由于使用 <code>@objc</code> 特性会增加应用程序编译后的体积并对性能产生不利影响，因此只有在每个成员都需要使用 <code>@objc</code> 特性时才应在类声明中使用 <code>@objcMembers</code> 特性。</p><p><a name="NSCoding"></a></p><h3 id="nscoding-协议" tabindex="-1">NSCoding 协议 <a class="header-anchor" href="#nscoding-协议" aria-label="Permalink to &quot;NSCoding 协议&quot;">​</a></h3><p><code>NSCoding</code>协议要求采用协议的类型实现其所要求的构造器<code>init(coder:)</code>以及其所要求的方法<code>encode(with:)</code>。直接采用<code>NSCoding</code>协议的类必须实现这个方法。对于采用<code>NSCoding</code>协议的类的子类，如果有一个或者多个自定义的构造器或者有不具有默认初始值的属性，那么也必须实现这个方法。Xcode 提供了下面这个<code>fix-it</code>来提供一个占位实现：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">required</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">coder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> aDecoder: NSCoder) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    fatalError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;init(coder:) has not been implemented&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>对于那些从 Storyboards 里加载的对象，或者用<code>NSUserDefaults</code>或<code>NSKeyedArchiver</code>归档到硬盘的对象，则必须提供该构造器的完整实现。当然，如果一个类型不会以此种方式实例化时，就不需要提供该构造器的完整实现。</p><p><a name="adopting_protocols"></a></p><h2 id="采用协议" tabindex="-1">采用协议 <a class="header-anchor" href="#采用协议" aria-label="Permalink to &quot;采用协议&quot;">​</a></h2><p>Objective-C 协议会被导入为 Swift 协议。所有协议都写在一个用逗号分隔的列表中，跟在父类类名后面（如果该类有父类的话）。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MySwiftViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UITableViewDelegate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UITableViewDataSource </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 定义类</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>声明符合单个协议的类型时，直接使用协议名作为其类型，类似于 Objective-C 中<code>id&lt;SomeProtocol&gt;</code>这种形式。声明符合多个协议的类型时，使用<code>SomeProtocol &amp; AnotherProtocol</code>这种协议组合的形式，类似于 Objective-C 中<code>id&lt;SomeProtocol, AnotherProtocol&gt;</code>这种形式。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> textFieldDelegate: UITextFieldDelegate</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tableViewController: UITableViewDataSource </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UITableViewDelegate</span></span></code></pre></div><blockquote><p>注意<br> 在 Swift，类和协议的命名空间是统一的，因此 Objective-C 的<code>NSObject</code>协议会被重映射为 Swift 的<code>NSObjectProtocol</code>协议。</p></blockquote><p><a name="writing_initializers_and_deinitializers"></a></p><h2 id="编写构造器和析构器" tabindex="-1">编写构造器和析构器 <a class="header-anchor" href="#编写构造器和析构器" aria-label="Permalink to &quot;编写构造器和析构器&quot;">​</a></h2><p>Swift 编译器能确保构造器不会遗留任何未初始化的属性，从而增加代码的安全性和可预测性。另外，与 Objective-C 不同，Swift 不提供单独的内存分配方法。你会始终使用原生的 Swift 构造器，即使是使用 Objective-C 类，Swift 会将 Objective-C 构造方法转换为 Swift 构造器。请参阅 <a href="http://wiki.jikexueyuan.com/project/swift/" target="_blank" rel="noreferrer"><em>The Swift Programming Language 中文版</em></a> 中的 <a href="http://wiki.jikexueyuan.com/project/swift/chapter2/14_Initialization.html" target="_blank" rel="noreferrer">构造器</a> 章节了解关于如何实现构造器的更多信息。</p><p>如果希望在对象释放前进行额外的清理工作，可以实现一个析构器来代替<code>dealloc</code>方法。在对象被释放前，Swift 会自动调用析构器。当 Swift 调用完子类的析构器后，会自动调用父类的析构器。使用 Objective-C 类或者继承自 Objective-C 类的 Swift 类时，Swift 也会自动调用该类父类中的<code>dealloc</code>方法。请参阅 <a href="http://wiki.jikexueyuan.com/project/swift/" target="_blank" rel="noreferrer"><em>The Swift Programming Language 中文版</em></a> 中的 <a href="http://wiki.jikexueyuan.com/project/swift/chapter2/15_Deinitialization.html" target="_blank" rel="noreferrer">析构器</a> 章节了解关于如何实现析构器的更多信息。</p><p><a name="using_swift_class_names_with_objective_c_apis"></a></p><h2 id="兼容使用-swift-类名的-objective-c-api" tabindex="-1">兼容使用 Swift 类名的 Objective-C API <a class="header-anchor" href="#兼容使用-swift-类名的-objective-c-api" aria-label="Permalink to &quot;兼容使用 Swift 类名的 Objective-C API&quot;">​</a></h2><p>Swift 类的命名空间基于其所在的模块，即使是使用来自 Objective-C 的代码。在 Objective-C 中所有的类都是全局命名空间的一部分，名字不能重复。而 Swift 类可以基于其所在模块来消除歧义。例如，<code>MyFramework</code>框架中的<code>DataManager</code>类在 Swift 中的全限定名是<code>MyFramework.DataManager</code>。一个 Swift 应用的<code>target</code>就是一个模块，因此，在一个叫<code>MyGreatApp</code>的应用里，一个叫做<code>Observer</code>的 Swift 类的全限定名是<code>MyGreatApp.Observer</code>。</p><p>Swift 类在 Objective-C 代码中使用时，为了保持命名空间，Swift 类会将其全限定名暴露给 Objective-C 运行时。因此，使用那些用到 Swift 类名字符串的 API 时，必须使用类的全限定名。例如，你创建了一个基于文档的 Mac 应用，需要在应用的<code>Info.plist</code>里提供<code>NSDocument</code>子类的类名。在 Swift 中，必须使用<code>NSDocument</code>子类的全限定名，即应用名或者框架名加上子类名。</p><p>下面的例子中，<code>NSClassFromString(_:)</code>函数用于从一个字符串表示的类名获取该类的引用。为了获取 Swift 类，需要使用全限定名，也就是需要加上应用的名字。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myPersonClass: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AnyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">？</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NSClassFromString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyGreatApp.Person&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><a name="integrating_with_interface_builder"></a></p><h2 id="与-interface-builder-结合" tabindex="-1">与 Interface Builder 结合 <a class="header-anchor" href="#与-interface-builder-结合" aria-label="Permalink to &quot;与 Interface Builder 结合&quot;">​</a></h2><p>Swift 编译器包含一些特性，能让 Swift 类使用 Interface Builder 的一些特色功能。和 Objective-C 一样，在 Swift 也可使用 outlet，action 以及实时渲染。</p><p><a name="working_with_outlets_and_actions"></a></p><h3 id="使用-outlet-和-action" tabindex="-1">使用 Outlet 和 Action <a class="header-anchor" href="#使用-outlet-和-action" aria-label="Permalink to &quot;使用 Outlet 和 Action&quot;">​</a></h3><p>使用 Outlets 和 Actions 可以连接源代码和 Interface Builder 中的 UI 对象，只需在属性或方法声明前标记<code>@IBOutlet</code>或<code>@IBAction</code>特性。声明一个 outlet 集合同样是用<code>@IBOutlet</code>特性，只不过会为该类型指定一个数组。</p><p>在 Swift 中声明一个 outlet 时，应该将类型声明为隐式解包可选类型。通过这种方式，Swift 编译器会自动为它分配空值<code>nil</code>，就不需要在构造器中为其分配初始值了。在运行时，构造过程完成后，Interface Builder 会连接各个 outlet。如果从故事版或者<code>xib</code>文件实例化对象，则可以假定这些 outlet 已经连接完毕。</p><p>例如，下面的 Swift 代码声明了一个拥有 outlet，outlet 集合和 action 的类：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIViewController </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @IBOutlet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> weak</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> button: UIButton</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @IBOutlet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> textFields: [UITextField]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @IBAction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> buttonTapped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sender</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AnyObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button tapped!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a name="live_rendering"></a></p><h3 id="实时渲染" tabindex="-1">实时渲染 <a class="header-anchor" href="#实时渲染" aria-label="Permalink to &quot;实时渲染&quot;">​</a></h3><p>可以使用<code>@IBDesignable</code>和<code>@IBInspectable</code>特性开启实时渲染，在 Interface Builder 中对自定义视图进行交互式设计。继承<code>UIView</code>或者<code>NSView</code>来自定义一个视图时，可以在类声明前标记<code>@IBDesignable</code>特性。在 Interface Builder 里添加自定义的视图后（在 Identity Inspector 面板的 Class 输入框中进行设置），Interface Builder 将在画布上实时渲染自定义视图。</p><p>还可以将<code>@IBInspectable</code>特性添加到类型兼容<code>用户定义运行时属性</code>（可以在 Identity Inspector 面板的 User Defined Runtime Attributes 中查看）的属性前。将自定义的视图添加到 Interface Builder 后，就可以在 Attributes Inspector 面板中编辑这些属性。</p><p><img src="`+n+'" alt=""></p><p><img src="'+l+`" alt=""></p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@IBDesignable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyCustomView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIView </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @IBInspectable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> textColor: UIColor</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @IBInspectable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iconHeight: CGFloat</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a name="specifying_property_attributes"></a></p><h2 id="指定属性特性" tabindex="-1">指定属性特性 <a class="header-anchor" href="#指定属性特性" aria-label="Permalink to &quot;指定属性特性&quot;">​</a></h2><p>在 Objective-C，属性通常会有一系列用于指定该属性的一些附加信息的属性特性。在 Swift，将通过不同的方式指明这些属性特性。</p><p><a name="strong_and_weak"></a></p><h3 id="强引用和弱引用" tabindex="-1">强引用和弱引用 <a class="header-anchor" href="#强引用和弱引用" aria-label="Permalink to &quot;强引用和弱引用&quot;">​</a></h3><p>在 Swift，属性默认都是强引用，可以使用<code>weak</code>关键字指明某个属性持有其所指向对象的弱引用。该关键字仅能修饰可选的类类型。请参阅 <a href="http://wiki.jikexueyuan.com/project/swift/" target="_blank" rel="noreferrer"><em>The Swift Programming Language 中文版</em></a> 中的 <a href="http://wiki.jikexueyuan.com/project/swift/chapter2/09_Classes_and_Structures.html" target="_blank" rel="noreferrer">类和结构</a> 章节了解更多信息。</p><p><a name="read_write_and_read_only"></a></p><h3 id="读写和只读" tabindex="-1">读写和只读 <a class="header-anchor" href="#读写和只读" aria-label="Permalink to &quot;读写和只读&quot;">​</a></h3><p>在 Swift，没有<code>readwrite</code>和<code>readonly</code>特性。声明一个存储型属性时，使用<code>let</code>使其只读；使用<code>var</code>使其可读写。声明一个计算型属性时，只为其提供一个读取方法使其只读；同时提供读取方法和写入方法使其可读写。请参阅 <a href="http://wiki.jikexueyuan.com/project/swift/" target="_blank" rel="noreferrer"><em>The Swift Programming Language 中文版</em></a> 中的 <a href="http://wiki.jikexueyuan.com/project/swift/chapter2/10_Properties.html" target="_blank" rel="noreferrer">属性</a> 章节了解更多信息。</p><p><a name="copy_semantics"></a></p><h3 id="拷贝语义" tabindex="-1">拷贝语义 <a class="header-anchor" href="#拷贝语义" aria-label="Permalink to &quot;拷贝语义&quot;">​</a></h3><p>在 Swift，Objective-C 的<code>copy</code>属性特性被转化为<code>@NSCopying</code>。这种类型的属性必须符合<code>NSCopying</code>协议。请参阅 <a href="http://wiki.jikexueyuan.com/project/swift/" target="_blank" rel="noreferrer"><em>The Swift Programming Language 中文版</em></a> 中的 <a href="http://wiki.jikexueyuan.com/project/swift/chapter2/09_Classes_and_Structures.html" target="_blank" rel="noreferrer">类和结构</a> 章节了解更多信息。</p><p><a name="implementing_core_data_managed_object_subclasses"></a></p><h2 id="实现-core-data-的-nsmanagedobject-子类" tabindex="-1">实现 Core Data 的 NSManagedObject 子类 <a class="header-anchor" href="#实现-core-data-的-nsmanagedobject-子类" aria-label="Permalink to &quot;实现 Core Data 的 NSManagedObject 子类&quot;">​</a></h2><p>Core Data 提供了底层存储以及<code>NSManagedObject</code>子类的属性实现，还提供了在对多关系中添加和移除对象的实例方法实现。可以使用<code>@NSManaged</code>特性告知 Swift 编译器，一个声明的底层存储和实现部分将在运行时由 Core Data 提供。</p><p>在<code>NSManagedObject</code>子类中，为每一个和 Core Data 实体模型文件中相对应的属性或者方法声明标记<code>@NSManaged</code>特性。例如，思考下面这个叫做<code>Person</code>的 Core Data 实体，它有个叫做<code>name</code>的<code>String</code>类型的属性，以及一个叫做<code>friends</code>的对多关系。</p><p><img src="`+p+`" alt=""></p><p>相对应的<code>NSManagedObject</code>子类<code>Person</code>中的代码如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CoreData</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NSManagedObject </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @NSManaged</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @NSManaged</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> friends: NSSet</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @NSManaged</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addFriendsObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">friend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Person)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @NSManaged</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> removeFriendsObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">friend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Person)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @NSManaged</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addFriends</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">friends</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: NSSet)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @NSManaged</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> removeFriends</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">friends</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: NSSet)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>name</code>和<code>friends</code>属性都标记了<code>@NSManaged</code>特性，以此表明 Core Data 会在运行时提供其实现和存储。由于<code>friends</code>是个对多关系，因此 Core Data 还提供了一些相关的存取方法。</p><p>为了在 Swift 中配置一个<code>NSManagedObject</code>的子类供 Core Data 模型实体使用，在 Xcode 中打开 Data Model Inspector，在 Class 输入框中输入类名，并在 Module 输入框的下拉列表中选择<code>Current Product Module</code>。</p><p><img src="`+h+`" alt=""></p><p><a name="declaring_protocols"></a></p><h2 id="声明协议" tabindex="-1">声明协议 <a class="header-anchor" href="#声明协议" aria-label="Permalink to &quot;声明协议&quot;">​</a></h2><p>在 Swift 中可以定义能让 Objective-C 类采用的协议，在协议声明前添加<code>@objc</code>特性即可。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UIKit</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@objc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> protocol</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyCustomProtocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> people: [Person] { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tableView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tableView: UITableView, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cell: UITableViewCell, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forPerson</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person: Person)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @objc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> optional</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tableView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tableView: UITableView, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">willDisplay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cell: UITableViewCell, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forPerson</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person: Person)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>为了符合协议，Objective-C 类必须实现协议中声明的所有构造器，属性，下标，以及方法。可选协议要求必须标记<code>@objc</code>特性以及<code>optional</code>修饰符。</p><p>Objective-C 类可以像采用 Objective-C 协议一样采用 Swift 协议，实现所有协议要求即可。</p><div class="language-objective-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">objective-c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyCustomController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;MyCustomProtocol&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">nonatomic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">strong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NSArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;Person *&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">people;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@implementation</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyCustomController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@synthesize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> people;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tableView:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UITableView </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)tableView</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		 configure:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UITableViewCell </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)cell</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		 forPerson:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Person </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)person</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@end</span></span></code></pre></div>`,77)]))}const f=s(r,[["render",k]]);export{b as __pageData,f as default};
